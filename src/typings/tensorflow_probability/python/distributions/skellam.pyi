"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The Skellam distribution class."""
__all__ = ['Skellam']
class Skellam(distribution.DiscreteDistributionMixin, distribution.AutoCompositeTensorDistribution):
  """Skellam distribution.

  The Skellam distribution is parameterized by two rate parameters,
  `rate1` and `rate2`. Its samples are defined as:

  ```
  x ~ Poisson(rate1)
  y ~ Poisson(rate2)
  z = x - y
  z ~ Skellam(rate1, rate2)
  ```
  where the samples `x` and `y` are assumed to be independent.

  #### Mathematical Details

  The probability mass function (pmf) is,

  ```none
  pmf(k; l1, l2) = (l1 / l2) ** (k / 2) * I_k(2 * sqrt(l1 * l2)) / Z
  Z = exp(l1 + l2).
  ```

  where `rate1 = l1`, `rate2 = l2`,  `Z` is the normalizing constant
  and `I_k` is the modified bessel function of the first kind.
  """
  def __init__(self, rate1=..., rate2=..., log_rate1=..., log_rate2=..., force_probs_to_zero_outside_support=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Initialize a batch of Skellam distributions.

    Args:
      rate1: Floating point tensor, the first rate parameter. `rate1` must be
        positive. Must specify exactly one of `rate1` and `log_rate1`
      rate2: Floating point tensor, the second rate parameter. `rate` must be
        positive.  Must specify exactly one of `rate2` and `log_rate2`.
      log_rate1: Floating point tensor, the log of the first rate parameter.
        Must specify exactly one of `rate1` and `log_rate1`.
      log_rate2: Floating point tensor, the log of the second rate parameter.
        Must specify exactly one of `rate2` and `log_rate2`.
      force_probs_to_zero_outside_support: Python `bool`. When `True`,
        `log_prob` returns `-inf` (and `prob` returns `0`) for non-integer
        inputs. When `False`, `log_prob` evaluates the Skellam pmf as a
        continuous function (note that this function is not itself
        a normalized probability log-density).
        Default value: `False`.
      validate_args: Python `bool`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
        Default value: `False`.
      allow_nan_stats: Python `bool`. When `True`, statistics
        (e.g., mean, mode, variance) use the value "`NaN`" to indicate the
        result is undefined. When `False`, an exception is raised if one or
        more of the statistic's batch members are undefined.
        Default value: `True`.
      name: Python `str` name prefixed to Ops created by this class.

    Raises:
      ValueError: if none or both of `rate1`, `log_rate1` are specified.
      ValueError: if none or both of `rate2`, `log_rate2` are specified.
    """
    ...
  
  @property
  def rate1(self):
    """First Rate parameter."""
    ...
  
  @property
  def rate2(self):
    """Second rate parameter."""
    ...
  
  @property
  def log_rate1(self):
    """First log rate parameter."""
    ...
  
  @property
  def log_rate2(self):
    """Second log rate parameter."""
    ...
  
  @property
  def force_probs_to_zero_outside_support(self): # -> bool:
    """Interpolate (log) probs on non-integer inputs."""
    ...
  
  def rate1_parameter(self, name=...):
    """Rate computed from non-`None` input arg (`rate1` or `log_rate1`)."""
    ...
  
  def log_rate1_parameter(self, name=...):
    """Log-rate computed from non-`None` input arg (`rate1`, `log_rate1`)."""
    ...
  
  def rate2_parameter(self, name=...):
    """Rate computed from non-`None` input arg (`rate2` or `log_rate2`)."""
    ...
  
  def log_rate2_parameter(self, name=...):
    """Log-rate computed from non-`None` input arg (`rate2`, `log_rate2`)."""
    ...
  



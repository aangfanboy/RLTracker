"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import transformed_distribution

"""The Weibull distribution class."""
class Weibull(transformed_distribution.TransformedDistribution):
  """The Weibull distribution with 'concentration' and `scale` parameters.

  #### Mathematical details

  The probability density function (pdf) of this distribution is,

  ```none
  pdf(x; lambda, k) =
    k / lambda * (x / lambda) ** (k - 1) * exp(-(x / lambda) ** k)
  ```

  where `concentration = k` and `scale = lambda`.

  The cumulative density function of this distribution is,

  ```none
  cdf(x; lambda, k) = 1 - exp(-(x / lambda) ** k)
  ```

  The Weibull distribution includes the Exponential and Rayleigh distributions
  as special cases:

  ```none
  Exponential(rate) = Weibull(concentration=1., 1. / rate)
  ```

  ```none
  Rayleigh(scale) = Weibull(concentration=2., sqrt(2.) * scale)
  ```

  #### Examples

  Example of initialization of one distribution.

  ```python
  tfd = tfp.distributions

  # Define a single scalar Weibull distribution.
  dist = tfd.Weibull(concentration=1., scale=3.)

  # Evaluate the cdf at 1, returning a scalar.
  dist.cdf(1.)
  ```

  Example of initialization of a 3-batch of distributions with varying scales
  and concentrations.

  ```python
  tfd = tfp.distributions

  # Define a 3-batch of Weibull distributions.
  scale = [1., 3., 45.]
  concentration = [2.5, 22., 7.]
  dist = tfd.Weibull(concentration=concentration, scale=scale)

  # Evaluate the cdfs at 1.
  dist.cdf(1.)    # shape: [3]
  ```
  """
  def __init__(self, concentration, scale, validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct Weibull distributions.

    The parameters `concentration` and `scale` must be shaped in a way that
    supports broadcasting (e.g. `concentration + scale` is a valid operation).

    Args:
     concentration: Positive Float-type `Tensor`, the concentration param of the
       distribution. Must contain only positive values.
     scale: Positive Float-type `Tensor`, the scale param of the distribution.
       Must contain only positive values.
     validate_args: Python `bool` indicating whether arguments should be checked
       for correctness.
     allow_nan_stats: Python `bool` indicating whether nan values should be
       allowed.
     name: Python `str` name given to ops managed by this class.
       Default value: `'Weibull'`.

    Raises:
      TypeError: if concentration and scale are different dtypes.

    """
    ...
  
  @property
  def concentration(self):
    """Distribution parameter for the concentration."""
    ...
  
  @property
  def scale(self):
    """Distribution parameter for scale."""
    ...
  
  experimental_is_sharded = ...



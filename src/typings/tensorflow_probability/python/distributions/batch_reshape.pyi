"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector as bijector_lib
from tensorflow_probability.python.distributions import distribution as distribution_lib

"""The BatchReshape distribution."""
__all__ = ['BatchReshape']
class _BatchReshape(distribution_lib.Distribution):
  """The Batch-Reshaping distribution.

  This "meta-distribution" reshapes the batch dimensions of another
  distribution.

  #### Examples

  ```python
  tfd = tfp.distributions

  dtype = np.float32
  dims = 2
  new_batch_shape = [1, 2, -1]
  old_batch_shape = [6]

  scale = np.ones(old_batch_shape + [dims], dtype)
  mvn = tfd.MultivariateNormalDiag(scale_diag=scale)
  reshape_mvn = tfd.BatchReshape(
      distribution=mvn,
      batch_shape=new_batch_shape,
      validate_args=True)

  reshape_mvn.batch_shape
  # ==> [1, 2, 3]

  x = reshape_mvn.sample(sample_shape=[4, 5])
  x.shape
  # ==> [4, 5, 1, 2, 3, 2] == sample_shape + new_batch_shape + [dims]

  reshape_mvn.log_prob(x).shape
  # ==> [4, 5, 1, 2, 3] == sample_shape + new_batch_shape
  ```

  """
  def __init__(self, distribution, batch_shape, validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct BatchReshape distribution.

    Args:
      distribution: The base distribution instance to reshape. Typically an
        instance of `Distribution`.
      batch_shape: Positive `int`-like vector-shaped `Tensor` representing
        the new shape of the batch dimensions. Up to one dimension may contain
        `-1`, meaning the remainder of the batch size.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      allow_nan_stats: Python `bool`, default `True`. When `True`, statistics
        (e.g., mean, mode, variance) use the value `NaN` to indicate the
        result is undefined. When `False`, an exception is raised if one or
        more of the statistic's batch members are undefined.
      name: The name to give Ops created by the initializer.
        Default value: `"BatchReshape" + distribution.name`.

    Raises:
      ValueError: if `batch_shape` is not a vector.
      ValueError: if `batch_shape` has non-positive elements.
      ValueError: if `batch_shape` size is not the same as a
        `distribution.batch_shape` size.
    """
    ...
  
  @property
  def distribution(self): # -> Any:
    ...
  
  @property
  def experimental_is_sharded(self):
    ...
  


class BatchReshape(_BatchReshape, distribution_lib.AutoCompositeTensorDistribution):
  def __new__(cls, *args, **kwargs): # -> _BatchReshape:
    """Maybe return a non-`CompositeTensor` `_BatchReshape`."""
    ...
  


def validate_init_args_statically(distribution, batch_shape): # -> None:
  """Helper to __init__ which makes or raises assertions."""
  ...

class _NonCompositeTensorBatchReshapeBijector(bijector_lib.Bijector):
  """The `default_event_space_bijector` for `tfd.BatchReshape`."""
  def __init__(self, base_bijector, reshape_fn, static_inverse_event_shape, inverse_event_shape_tensor) -> None:
    ...
  


class _BatchReshapeBijector(_NonCompositeTensorBatchReshapeBijector, bijector_lib.AutoCompositeTensorBijector):
  """The `default_event_space_bijector` for `tfd.BatchReshape`."""
  def __new__(cls, *args, **kwargs): # -> _NonCompositeTensorBatchReshapeBijector:
    """Maybe return a `_NonCompositeTensorBatchReshapeBijector`."""
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import transformed_distribution

"""LogitNormal distribution classes."""
__all__ = ['LogitNormal']
class LogitNormal(transformed_distribution.TransformedDistribution):
  """The logit-normal distribution."""
  def __init__(self, loc, scale, num_probit_terms_approx=..., gauss_hermite_scale_limit=..., gauss_hermite_degree=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct a logit-normal distribution.

    The LogitNormal distribution models random variables between 0 and 1 whose
    logit (i.e., sigmoid_inverse, i.e., `log(p) - log1p(-p)`) is normally
    distributed with mean `loc` and standard deviation `scale`. It is
    constructed as the sigmoid transformation, (i.e., `1 / (1 + exp(-x))`) of a
    Normal distribution.

    Args:
      loc: Floating-point `Tensor`; the mean of the underlying
        Normal distribution(s). Must broadcast with `scale`.
      scale: Floating-point `Tensor`; the stddev of the underlying
        Normal distribution(s). Must broadcast with `loc`.
      num_probit_terms_approx: The `k` used in the approximation,
        `sigmoid(x) approx= sum_i^k p[k,i] Normal(0, c[k, i]).cdf(x)`
        where `sum_i^k p[k,i]=1` and `p[k,i],c[k,i] > 0`
        [(Monahan and Stefanski, 1989)][1] and used in `mean_*_approx` functions
        [(Owen, 1980)][2]. Must be a python scalar integer between `1` and `8`
        (inclusive). Using `num_probit_terms_approx=2` should result in
        `mean_approx` error not exceeding `10**-4`.
        Default value: `2`.
      gauss_hermite_scale_limit: Floating-point `Tensor` or `None`.
        The (batch-wise) maximum scale at which to compute statistics
        with Gauss-Hermite quadrature instead of the Monahan-Stefanski
        approximation [1].  Default: `None`, which recovers the legacy
        behavior of using Monahan-Stefanski everywhere and does not
        add TF ops for Gauss-Hermite.  The best value depends on the
        working precision and the number of terms in the Gauss-Hermite
        or Monahan-Stefanski approximations being switched between,
        as well as the expected range of `loc` parameters; but `1` is
        not unreasonable.
      gauss_hermite_degree: Python integer giving the number of
        sample points to use for Gauss-Hermite quadrature.
      validate_args: Python `bool`, default `False`. Whether to validate input
        with asserts. If `validate_args` is `False`, and the inputs are
        invalid, correct behavior is not guaranteed.
      allow_nan_stats: Python `bool`, default `True`. If `False`, raise an
        exception if a statistic (e.g. mean/mode/etc...) is undefined for any
        batch member If `True`, batch members with valid parameters leading to
        undefined statistics will return NaN for this statistic.
      name: The name to give Ops created by the initializer.

    #### References

    [1]: Monahan, John H., and Leonard A. Stefanski. Normal scale mixture
         approximations to the logistic distribution with applications. North
         Carolina State University. Dept. of Statistics, 1989.
         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.5032
    [2]: Owen, Donald Bruce. "A table of normal integrals: A table."
         Communications in Statistics-Simulation and Computation 9.4 (1980):
         389-419.
         https://www.tandfonline.com/doi/abs/10.1080/03610918008812164

    """
    ...
  
  @property
  def loc(self):
    """Distribution parameter for the pre-transformed mean."""
    ...
  
  @property
  def scale(self):
    """Distribution parameter for the pre-transformed standard deviation."""
    ...
  
  @property
  def num_probit_terms_approx(self): # -> int:
    """Number of `Normal(0, 1).cdf` terms using in `mean_*_approx` functions."""
    ...
  
  @property
  def gauss_hermite_scale_limit(self): # -> None:
    """Largest scale using Gauss-Hermite quadrature in `*_approx` functions."""
    ...
  
  @property
  def gauss_hermite_degree(self): # -> int:
    """Number of points for Gauss-Hermite quadrature in `*_approx` functions."""
    ...
  
  experimental_is_sharded = ...
  def mean_log_prob_approx(self, y=..., name=...):
    """Approximates `E_Normal(m,s)[ Bernoulli(sigmoid(X)).log_prob(Y) ]`.

    This approximation is based on combining ideas from
    [(Monahan and Stefanski, 1989)][1] and [(Owen, 1980)][2].

    Warning: usual numerical guarantees are not offered for this function as it
    attempts to strike a balance between computational cost, implementation
    simplicity and numerical accuracy.

    Args:
      y: The events over which to compute the Bernoulli log prob.
        Default value: `None` (i.e., `1`).
      name: Python `str` prepended to names of ops created by this function.
        Default value: `'mean_log_prob_approx'`.

    Returns:
      mean_log_prob_approx: An approximation of the mean of the Bernoulli
        likelihood.

    #### References

    [1]: Monahan, John H., and Leonard A. Stefanski. Normal scale mixture
         approximations to the logistic distribution with applications. North
         Carolina State University. Dept. of Statistics, 1989.
         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.5032
    [2]: Owen, Donald Bruce. "A table of normal integrals: A table."
         Communications in Statistics-Simulation and Computation 9.4 (1980):
         389-419.
         https://www.tandfonline.com/doi/abs/10.1080/03610918008812164
    """
    ...
  
  def mean_approx(self, name=...):
    """Approximate the mean of a LogitNormal.

    This approximation is based on combining ideas from
    [(Monahan and Stefanski, 1989)][1] and [(Owen, 1980)][2].

    Warning: usual numerical guarantees are not offered for this function as it
    attempts to strike a balance between computational cost, implementation
    simplicity and numerical accuracy.

    Args:
      name: Python `str` prepended to names of ops created by this function.
        Default value: `'mean_approx'`.

    Returns:
      mean_approx: An approximation of the mean of a LogitNormal.

    #### References

    [1]: Monahan, John H., and Leonard A. Stefanski. Normal scale mixture
         approximations to the logistic distribution with applications. North
         Carolina State University. Dept. of Statistics, 1989.
         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.5032
    [2]: Owen, Donald Bruce. "A table of normal integrals: A table."
         Communications in Statistics-Simulation and Computation 9.4 (1980):
         389-419.
         https://www.tandfonline.com/doi/abs/10.1080/03610918008812164
    """
    ...
  
  def variance_approx(self, name=...):
    """Approximate the variance of a LogitNormal.

    This approximation is based on combining ideas from
    [(Monahan and Stefanski, 1989)][1] and [(Owen, 1980)][2].

    Warning: usual numerical guarantees are not offered for this function as it
    attempts to strike a balance between computational cost, implementation
    simplicity and numerical accuracy.

    Args:
      name: Python `str` prepended to names of ops created by this function.
        Default value: `'variance_approx'`.

    Returns:
      variance_approx: An approximation of the variance of a LogitNormal.

    #### References

    [1]: Monahan, John H., and Leonard A. Stefanski. Normal scale mixture
         approximations to the logistic distribution with applications. North
         Carolina State University. Dept. of Statistics, 1989.
         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.5032
    [2]: Owen, Donald Bruce. "A table of normal integrals: A table."
         Communications in Statistics-Simulation and Computation 9.4 (1980):
         389-419.
         https://www.tandfonline.com/doi/abs/10.1080/03610918008812164
    """
    ...
  
  def stddev_approx(self, name=...):
    """Approximate the stdandard deviation of a LogitNormal.

    This approximation is based on combining ideas from
    [(Monahan and Stefanski, 1989)][1] and [(Owen, 1980)][2].

    Warning: usual numerical guarantees are not offered for this function as it
    attempts to strike a balance between computational cost, implementation
    simplicity and numerical accuracy.

    Args:
      name: Python `str` prepended to names of ops created by this function.
        Default value: `'stddev_approx'`.

    Returns:
      stddev_approx: An approximation of the variance of a LogitNormal.

    #### References

    [1]: Monahan, John H., and Leonard A. Stefanski. Normal scale mixture
         approximations to the logistic distribution with applications. North
         Carolina State University. Dept. of Statistics, 1989.
         http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.154.5032
    [2]: Owen, Donald Bruce. "A table of normal integrals: A table."
         Communications in Statistics-Simulation and Computation 9.4 (1980):
         389-419.
         https://www.tandfonline.com/doi/abs/10.1080/03610918008812164
    """
    ...
  


_p1 = ...
_p2 = ...
_p3 = ...
_p4 = ...
_p5 = ...
_p6 = ...
_p7 = ...
_p8 = ...
_c1 = ...
_c2 = ...
_c3 = ...
_c4 = ...
_c5 = ...
_c6 = ...
_c7 = ...
_c8 = ...
MONAHAN_MIX_PROB = ...
MONAHAN_INVERSE_SCALE = ...
DEFAULT_ORDER = ...
DEFAULT_MIX_PROB = ...
DEFAULT_SCALE = ...
def approx_expected_log_prob_sigmoid(m, s, y=..., alpha=..., c=..., name=...):
  """Approximates `E_{N(m,s)}[Bernoulli(sigmoid(X)).log_prob(Y)]`."""
  ...

def approx_expected_softplus(m, s, alpha=..., c=..., name=...):
  """Approximates `E_{N(m,s)}[softplus(X)]`."""
  ...

def approx_expected_sigmoid(m, s, alpha=..., c=..., name=...):
  """Approximates `E_{N(m,s)}[sigmoid(X)]`."""
  ...

def approx_variance_sigmoid(m, s, alpha=..., c=..., name=...):
  """Approxmates `Var_{N(m,s)}[sigmoid(X)]`."""
  ...

def logit_normal_mean_gh(loc, scale, deg):
  """Approximates `E_{N(m,s)}[sigmoid(X)]` by Gauss-Hermite quadrature."""
  ...

def logit_normal_variance_gh(loc, scale, deg):
  """Approxmates `Var_{N(m,s)}[sigmoid(X)]` by Gauss-Hermite quadrature."""
  ...


"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The ProbitBernoulli distribution class."""
class ProbitBernoulli(distribution.DiscreteDistributionMixin, distribution.AutoCompositeTensorDistribution):
  """ProbitBernoulli distribution.

  The ProbitBernoulli distribution with `probs` parameter, i.e., the probability
  of a `1` outcome (vs a `0` outcome). Unlike a regular Bernoulli distribution,
  which uses the logistic (aka 'sigmoid') function to go from the un-constrained
  parameters to probabilities, this distribution uses the CDF of the [standard
  normal distribution](https://en.wikipedia.org/wiki/Normal_distribution):

  ```none
  p(x=1; probits) = 0.5 * (1 + erf(probits / sqrt(2)))
  p(x=0; probits) = 1 - p(x=1; probits)
  ```

  Where `erf` is the [error
  function](https://en.wikipedia.org/wiki/Error_function). A typical application
  of this distribution is in [probit
  regression](https://en.wikipedia.org/wiki/Probit_model).
  """
  def __init__(self, probits=..., probs=..., dtype=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct ProbitBernoulli distributions.

    Args:
      probits: An N-D `Tensor` representing the probit-odds of a `1` event. Each
        entry in the `Tensor` parameterizes an independent ProbitBernoulli
        distribution where the probability of an event is normal_cdf(probits).
        Only one of `probits` or `probs` should be passed in.
      probs: An N-D `Tensor` representing the probability of a `1`
        event. Each entry in the `Tensor` parameterizes an independent
        ProbitBernoulli distribution. Only one of `probits` or `probs` should be
        passed in.
      dtype: The type of the event samples. Default: `int32`.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      allow_nan_stats: Python `bool`, default `True`. When `True`,
        statistics (e.g., mean, mode, variance) use the value "`NaN`" to
        indicate the result is undefined. When `False`, an exception is raised
        if one or more of the statistic's batch members are undefined.
      name: Python `str` name prefixed to Ops created by this class.

    Raises:
      ValueError: If probs and probits are passed, or if neither are passed.
    """
    ...
  
  @property
  def probits(self):
    """Input argument `probits`."""
    ...
  
  @property
  def probs(self):
    """Input argument `probs`."""
    ...
  
  def probits_parameter(self, name=...):
    """Probits computed from non-`None` input arg (`probs` or `probits`)."""
    ...
  
  def probs_parameter(self, name=...):
    """Probs computed from non-`None` input arg (`probs` or `probits`)."""
    ...
  


def maybe_assert_bernoulli_param_correctness(is_init, validate_args, probs, probits): # -> list[Any]:
  """Return assertions for `ProbitBernoulli`-type distributions."""
  ...


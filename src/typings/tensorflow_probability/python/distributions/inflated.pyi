"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution as distribution_lib, mixture

"""A mixture of a point-mass and another distribution."""
__all__ = ['Inflated', 'inflated_factory', 'ZeroInflatedNegativeBinomial']
class _Inflated(mixture.Mixture):
  """A mixture of a point-mass and another distribution.

  Under the hood, this is implemented as a mixture.Mixture, and so
  supports all of the methods of that class.

  ### Examples:

  ```python
  zinb = Inflated(
           tfd.NegativeBinomial(5.0, probs=0.1), inflated_loc_prob=0.2)
  sample = zinb.sample(seed=jax.random.PRNGKey(0))
  ```
  """
  def __init__(self, distribution, inflated_loc_logits=..., inflated_loc_probs=..., inflated_loc=..., inflated_loc_atol=..., inflated_loc_rtol=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Initialize the Inflated distribution.

    Args:
      distribution: The tfp.Distribution to combine with a point mass at x. This
        code is intended to be used only with discrete distributions; when used
        with continuous distributions sampling will work but log_probs will be a
        sum of values with different units.
      inflated_loc_logits: A scalar or tensor containing the excess log-odds for
        the point mass at inflated_loc.  Only one of `inflated_loc_probs` or
        `inflated_loc_logits` should be passed in.
      inflated_loc_probs: A scalar or tensor containing the mixture weights for
        the point mass at inflated_loc.  Only one of `inflated_loc_probs` or
        `inflated_loc_logits` should be passed in.
      inflated_loc: A scalar or tensor containing the locations of the point
        mass component of the mixture.
      inflated_loc_atol:  Non-negative `Tensor` of same `dtype` as
        `inflated_loc` and broadcastable shape.  The absolute tolerance for
        comparing closeness to `inflated_loc`.  Default is `0`.
      inflated_loc_rtol:  Non-negative `Tensor` of same `dtype` as
        `inflated_loc` and broadcastable shape.  The relative tolerance for
        comparing closeness to `inflated_loc`.  Default is `0`.
      validate_args: If true, inconsistent batch or event sizes raise a runtime
        error.
      allow_nan_stats: If false, any undefined statistics for any batch memeber
        raise an exception.
      name: An optional name for the distribution.
    """
    ...
  
  @property
  def distribution(self): # -> Any:
    """The distribution used for the non-inflated part."""
    ...
  
  @property
  def inflated_loc_logits(self):
    """The log-odds for the point mass part of the distribution."""
    ...
  
  @property
  def inflated_loc_probs(self):
    """The mixture weight(s) for the point mass part of the distribution."""
    ...
  
  @property
  def inflated_loc(self):
    """The location to add probability mass to."""
    ...
  


class Inflated(_Inflated, distribution_lib.AutoCompositeTensorDistribution):
  def __new__(cls, *args, **kwargs): # -> _Inflated:
    """Maybe return a non-`CompositeTensor` `_Inflated`."""
    ...
  


def inflated_factory(default_name, distribution_class, inflated_loc, **more_kwargs): # -> Any:
  """Create Inflated subclasses for specific distributions and positions.

  Example usages:
    SpikeAndSlab = inflated_factory('SpikeAndSlab', tfd.Normal, 0.0)
    s_and_s = SpikeAndSlab(inflated_loc_probs=0.3, loc=5.0, scale=2.0)

    ZeroInflatedNegativeBinomial = inflated_factory(
        'ZeroInflatedNegativeBinomial', tfd.NegativeBinomial, 0.0)
    zinb = ZeroInflatedNegativeBinomial(inflated_loc_probs=0.2, probs=0.5,
                                        total_count=10.0)

  Args:
    default_name:  The name of the subclass, unless the user passes a
      name argument to init.
    distribution_class:  A tfd.Distribution class.
    inflated_loc:  The scalar position to inflate.
    **more_kwargs: Additional keyword arguments to pass to the
      distribution_class.

  Returns:
    A Inflated subclass that is the inflated version of distribution_class.
  """
  ...

ZeroInflatedNegativeBinomial = ...

"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The Geometric distribution class."""
class Geometric(distribution.DiscreteDistributionMixin, distribution.AutoCompositeTensorDistribution):
  """Geometric distribution.

  The Geometric distribution is parameterized by p, the probability of a
  positive event. It represents the probability that in k + 1 Bernoulli trials,
  the first k trials failed, before seeing a success.

  The pmf of this distribution is:

  #### Mathematical Details

  ```none
  pmf(k; p) = (1 - p)**k * p
  ```

  where:

  * `p` is the success probability, `0 < p <= 1`, and,
  * `k` is a non-negative integer.

  """
  def __init__(self, logits=..., probs=..., force_probs_to_zero_outside_support=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct Geometric distributions.

    Args:
      logits: Floating-point `Tensor` with shape `[B1, ..., Bb]` where `b >= 0`
        indicates the number of batch dimensions. Each entry represents logits
        for the probability of success for independent Geometric distributions
        and must be in the range `(-inf, inf]`. Only one of `logits` or `probs`
        should be specified.
      probs: Positive floating-point `Tensor` with shape `[B1, ..., Bb]`
        where `b >= 0` indicates the number of batch dimensions. Each entry
        represents the probability of success for independent Geometric
        distributions and must be in the range `(0, 1]`. Only one of `logits`
        or `probs` should be specified.
      force_probs_to_zero_outside_support: Python `bool`. When `True`, negative
        and non-integer values are evaluated "strictly": `log_prob` returns
        `-inf`, `prob` returns `0`, and `cdf` and `sf` correspond.  When
        `False`, the implementation is free to save computation (and TF graph
        size) by evaluating something that matches the Geometric pmf at integer
        values `k` but produces an unrestricted result on other inputs. In the
        case of Geometric distribution, the `log_prob` formula in this case
        happens to be the continuous function `k * log(1 - probs) + log(probs)`.
        Note that this function is not a normalized probability log-density.
        Default value: `False`.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      allow_nan_stats: Python `bool`, default `True`. When `True`, statistics
        (e.g., mean, mode, variance) use the value "`NaN`" to indicate the
        result is undefined. When `False`, an exception is raised if one or
        more of the statistic's batch members are undefined.
      name: Python `str` name prefixed to Ops created by this class.
    """
    ...
  
  @property
  def logits(self):
    """Input argument `logits`."""
    ...
  
  @property
  def probs(self):
    """Input argument `probs`."""
    ...
  
  @property
  def force_probs_to_zero_outside_support(self): # -> bool:
    """Return 0 probabilities on non-integer inputs."""
    ...
  
  def logits_parameter(self, name=...):
    """Logits computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  
  def probs_parameter(self, name=...):
    """Probs computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  



"""
This type stub file was generated by pyright.
"""

"""Internal helper libraries for stochastic processes."""
def is_empty_observation_data(feature_ndims, observation_index_points, observations): # -> bool:
  """Returns `True` if given observation data is empty.

  "Empty" means either
    1. Both `observation_index_points` and `observations` are `None`, or
    2. the "number of observations" shape is 0. The shape of
    `observation_index_points` (or each of its components, if nested) is
    `[..., N, f1, ..., fF]`, where `N` is the number of observations and the
    `f`s are feature dims. Thus, we look at the shape element just to the
    left of the leftmost feature dim. If that shape is zero, we consider the
    data empty.

  We don't check the shape of observations; validations are checked elsewhere in
  the calling code, to ensure these shapes are consistent.

  Args:
    feature_ndims: the number of feature dims, as reported by the GP kernel.
    observation_index_points: the observation data locations in the index set.
    observations: the observation data.

  Returns:
    is_empty: True if the data were deemed to be empty.
  """
  ...

def validate_observation_data(kernel, observation_index_points, observations): # -> None:
  """Ensure that observation data and locations have consistent shapes.

  This basically means that the batch shapes are broadcastable. We can only
  ensure this when those shapes are fully statically defined.


  Args:
    kernel: The GP kernel.
    observation_index_points: the observation data locations in the index set.
    observations: the observation data.

  Raises:
    ValueError: if the observations' batch shapes are not broadcastable.
  """
  ...

def check_nested_index_points(kernel, index_points): # -> None:
  """Ensures that the example dimensions are the same or broadcastable."""
  ...

def add_diagonal_shift(matrix, shift):
  ...

def event_shape_tensor(kernel, index_points): # -> list[Any]:
  """Get shape of number of index poins."""
  ...

def event_shape(kernel, index_points):
  """Get shape of number of index poins."""
  ...

def multitask_event_shape_tensor(kernel, index_points):
  ...

def multitask_event_shape(kernel, index_points):
  ...

def maybe_create_mean_fn(mean_fn, dtype): # -> Callable[..., object] | Callable[..., Any]:
  """Create a default mean function if one is not provided."""
  ...

def maybe_create_multitask_mean_fn(mean_fn, kernel, dtype): # -> Callable[..., object] | Callable[..., Any]:
  """Create a default mean function if one is not provided."""
  ...

def get_loc_and_kernel_matrix(kernel, index_points, observation_noise_variance, mean_fn, is_missing=..., mask_loc=...): # -> tuple[Any, Any]:
  """Compute location and kernel matrix from inputs, possibly masking them."""
  ...

def compute_kernel_matrix(kernel, index_points, observation_noise_variance):
  ...


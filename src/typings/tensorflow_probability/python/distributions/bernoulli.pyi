"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The Bernoulli distribution class."""
class Bernoulli(distribution.DiscreteDistributionMixin, distribution.AutoCompositeTensorDistribution):
  """Bernoulli distribution.

  The Bernoulli distribution with `probs` parameter, i.e., the probability of a
  `1` outcome (vs a `0` outcome).
  """
  def __init__(self, logits=..., probs=..., dtype=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Construct Bernoulli distributions.

    Args:
      logits: An N-D `Tensor` representing the log-odds of a `1` event. Each
        entry in the `Tensor` parameterizes an independent Bernoulli
        distribution where the probability of an event is sigmoid(logits). Only
        one of `logits` or `probs` should be passed in.
      probs: An N-D `Tensor` representing the probability of a `1`
        event. Each entry in the `Tensor` parameterizes an independent
        Bernoulli distribution. Only one of `logits` or `probs` should be passed
        in.
      dtype: The type of the event samples. Default: `int32`.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      allow_nan_stats: Python `bool`, default `True`. When `True`,
        statistics (e.g., mean, mode, variance) use the value "`NaN`" to
        indicate the result is undefined. When `False`, an exception is raised
        if one or more of the statistic's batch members are undefined.
      name: Python `str` name prefixed to Ops created by this class.

    Raises:
      ValueError: If p and logits are passed, or if neither are passed.
    """
    ...
  
  @property
  def logits(self):
    """Input argument `logits`."""
    ...
  
  @property
  def probs(self):
    """Input argument `probs`."""
    ...
  
  def logits_parameter(self, name=...):
    """Logits computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  
  def probs_parameter(self, name=...):
    """Probs computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  


def maybe_assert_bernoulli_param_correctness(is_init, validate_args, probs, logits): # -> list[Any]:
  """Return assertions for `Bernoulli`-type distributions."""
  ...


"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The Negative Binomial distribution class."""
class NegativeBinomial(distribution.DiscreteDistributionMixin, distribution.AutoCompositeTensorDistribution):
  """NegativeBinomial distribution.

  The NegativeBinomial distribution is related to the experiment of performing
  Bernoulli trials in sequence. Given a Bernoulli trial with probability `p` of
  success, the NegativeBinomial distribution represents the distribution over
  the number of successes `s` that occur until we observe `f` failures.

  The probability mass function (pmf) is,

  ```none
  pmf(s; f, p) = p**s (1 - p)**f / Z
  Z = s! (f - 1)! / (s + f - 1)!
  ```

  where:
  * `total_count = f`,
  * `probs = p`,
  * `Z` is the normalizaing constant, and,
  * `n!` is the factorial of `n`.
  """
  def __init__(self, total_count, logits=..., probs=..., validate_args=..., allow_nan_stats=..., require_integer_total_count=..., name=...) -> None:
    """Construct NegativeBinomial distributions.

    Args:
      total_count: Positive floating-point `Tensor` with shape broadcastable to
        `[B1,..., Bb]` with `b >= 0` and the same dtype as `probs` or
        `logits`. Defines this as a batch of `N1 x ... x Nm` different Negative
        Binomial distributions. In practice, this represents the number of
        negative Bernoulli trials to stop at (the `total_count` of
        failures). Its components should be equal to integer values.
      logits: Floating-point `Tensor` with shape broadcastable to
        `[B1, ..., Bb]` where `b >= 0` indicates the number of batch dimensions.
        Each entry represents logits for the probability of success for
        independent Negative Binomial distributions and must be in the half-open
        interval `[-inf, inf)`. Only one of `logits` or `probs` should be
        specified.
      probs: Positive floating-point `Tensor` with shape broadcastable to
        `[B1, ..., Bb]` where `b >= 0` indicates the number of batch dimensions.
        Each entry represents the probability of success for independent
        Negative Binomial distributions and must be in the half-open interval
        `[0, 1)`. Only one of `logits` or `probs` should be specified.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      allow_nan_stats: Python `bool`, default `True`. When `True`, statistics
        (e.g., mean, mode, variance) use the value "`NaN`" to indicate the
        result is undefined. When `False`, an exception is raised if one or
        more of the statistic's batch members are undefined.
      require_integer_total_count: Python `bool`, default `True`.  When `True`,
        the total_count parameter is required to be integer.
      name: Python `str` name prefixed to Ops created by this class.
    """
    ...
  
  @classmethod
  def experimental_from_mean_dispersion(cls, mean, dispersion, **kwargs): # -> Self:
    """Constructs a NegativeBinomial from its mean and dispersion.

    **Experimental: Naming, location of this API may change.**

    In this parameterization, the dispersion is defined as the reciprocal of the
    total count of failures, i.e. `dispersion = 1 / total_count`.

    Args:
      mean: The mean of the constructed distribution.
      dispersion: The reciprocal of the total_count of the constructed
        distribution.
      **kwargs: Other keyword arguments passed directly to `__init__`, e.g.
        `validate_args`.

    Returns:
      neg_bin: A distribution with the given parameterization.
    """
    ...
  
  @property
  def total_count(self):
    """Number of negative trials."""
    ...
  
  @property
  def logits(self):
    """Input argument `logits`."""
    ...
  
  @property
  def probs(self):
    """Input argument `probs`."""
    ...
  
  def logits_parameter(self, name=...):
    """Logits computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  
  def probs_parameter(self, name=...):
    """Probs computed from non-`None` input arg (`probs` or `logits`)."""
    ...
  


def maybe_assert_negative_binomial_param_correctness(is_init, validate_args, total_count, probs, logits, require_integer_total_count): # -> list[Any]:
  """Return assertions for `NegativeBinomial`-type distributions."""
  ...


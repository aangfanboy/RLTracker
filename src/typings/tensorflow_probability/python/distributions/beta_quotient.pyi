"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The BetaQuotient distribution class."""
__all__ = ['BetaQuotient']
class BetaQuotient(distribution.AutoCompositeTensorDistribution):
  """BetaQuotient distribution.

  The Beta Quotient distribution is defined over the positive reals, as
  the ratio of two Independent Beta distributed random variables.

  In other words:

  ```none
  X ~ Beta(a0, b0)
  Y ~ Beta(a1, b1)
  X / Y ~ BetaQuotient(a0, b0, a1, b1)
  ```

  The distribution is defined over the positive reals, by four parameters
  `concentration0_numerator`, `concentration1_numerator`,
  `concentration0_denominator` and `concentration1_denominator`
  (aka `beta` and `alpha` of the numerator and denominator Beta distribution
  respectively).

  Distribution parameters are automatically broadcast in all functions; see
  examples for details.

  Warning: The samples can be zero or inf due to finite precision.
  This happens more often when some of the concentrations are very small.

  Samples of this distribution are reparameterized (pathwise differentiable).
  The derivatives are computed using the approach described in [3].

  #### Examples

  ```python
  import tensorflow_probability as tfp
  tfd = tfp.distributions

  # Create a batch of three BetaQuotient distributions.
  alpha0 = [1, 2, 3]
  alpha1 = [5]
  beta0 = [1, 2, 3]
  beta1 = [0.4]
  dist = tfd.BetaQuotient(alpha0, beta0, alpha1, beta1)

  dist.sample([4, 5])  # Shape [4, 5, 3]

  # `x` has three batch entries, each with two samples.
  x = [[.1, .4, .5],
       [.2, .3, .5]]
  # Calculate the probability of each pair of samples under the corresponding
  # distribution in `dist`.
  dist.prob(x)         # Shape [2, 3]
  ```

  #### References
  [1] T. Pham-Gia, Distributions of the ratios of independent beta variables
      and applications. Communications in Statistics, Theory and Methods.
      Volume 29.

  [2] S. Nadarajah, Sums, products and ratios of generalized beta variables.
      Statistical Papers, 47.

  [3] Michael Figurnov, Shakir Mohamed, Andriy Mnih. Implicit
      Reparameterization Gradients. https://arxiv.org/abs/1805.08498
  """
  def __init__(self, concentration1_numerator, concentration0_numerator, concentration1_denominator, concentration0_denominator, validate_args=..., allow_nan_stats=..., name=...) -> None:
    ...
  
  @property
  def concentration1_numerator(self):
    """Concentration parameter associated with a `1` outcome."""
    ...
  
  @property
  def concentration0_numerator(self):
    """Concentration parameter associated with a `0` outcome."""
    ...
  
  @property
  def concentration1_denominator(self):
    """Concentration parameter associated with a `1` outcome."""
    ...
  
  @property
  def concentration0_denominator(self):
    """Concentration parameter associated with a `0` outcome."""
    ...
  



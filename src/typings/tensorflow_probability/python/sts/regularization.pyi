"""
This type stub file was generated by pyright.
"""

"""Utilities for regularizing a time series to a fixed frequency."""
__all__ = ['MissingValuesTolerance', 'regularize_series']
MissingValuesTolerance = ...
_PD_TO_NP_DELTAS = ...
_VALID_DATA_TYPES = ...
def regularize_series(series, frequency=..., warn_missing_tolerance=..., err_missing_tolerance=..., max_series_length=...):
  """Infers frequency and makes an irregular time series regular.

  Converts a time series into a regular time series having the same
  period between successive time points (e.g. 5 seconds, or 1 day).  If
  the frequency is known, it can be supplied through the 'frequency'
  argument; otherwise it will be inferred.

  If multiple values share the same timestamp, they are summed into a single
  value.

  Args:
    series: a Pandas `pd.Series` instance indexed by a `pd.DateTimeIndex`. This
      may also be a single-column `pd.DataFrame`.
    frequency: a Pandas DateOffset object, e.g. `pd.DateOffset(seconds=1)`. If
      no frequency is specified, and the index of `series` does not have a
      frequency populated, the granularity of the time series will be inferred
      automatically.
      Default value: `None`.
    warn_missing_tolerance: optional instance of
      `tfp.sts.MissingValuesTolerance`, specifying warning thresholds for
      too many missing values.
      Default value: `None`. (do not warn).
    err_missing_tolerance: optional instance of
      `tfp.sts.MissingValuesTolerance`, specifying error thresholds for
      too many missing values.
      Default value: `None`. (do not raise errors).
    max_series_length: `int` maximum length of the regularized
      series (note that regularization may increase the length of the series).
      Used to bound the resources used per invocation.
      Default value: `None`.
  Returns:
    regularized_series: instance of the same type as `series`
      (`pd.Series` or `pd.DataFrame`) whose index follows a regular
      frequency (`regularized_series.index.freq is not None`). Any values
      not provided are filled in as `NaN`.
  Raises:
    TypeError: if `data` is not an instance of `pd.Series` or `pd.DataFrame`.
    ValueError:  if `data` is empty, `data.index` is not a DatetimeIndex,
                 `data.index` is not sorted, or if applying the inferred
                 frequency would exceed the `max_series_length` or create
                 more missing values than allowed by `err_missing_vals`.
  """
  ...


"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import linear_gaussian_ssm as lgssm
from tensorflow_probability.python.sts.structural_time_series import StructuralTimeSeries

"""Autoregressive integrated moving average (ARIMA) model."""
__all__ = ['IntegratedStateSpaceModel', 'AutoregressiveIntegratedMovingAverage']
class IntegratedStateSpaceModel(lgssm.LinearGaussianStateSpaceModel):
  """Integrates (/cumsums) a noise-free state space model.

  The integrated model represents the cumulative sum of sequences sampled from
  an underlying state space model. In the absence of observation noise,
  this distribution is equivalent to `tfb.Cumsum()(original_ssm)`, but is
  represented explicitly as a linear Gaussian state space model allowing it to
  compose with other state space model components.

  The augmented transition model stores the expected output from step `t - 1`
  as additional dimension(s) in the latent state at step `t`. The observation
  model at each step is also then augmented to sum the current output of the
  underlying SSM with the previous (expected) output. Formally:

  ```python
  augmented_latent[t] = concat([original_latent[t], output[t-1]])

  augmented_transition_matrix = [
    [original_transition_matrix, zeros([latent_size, 1])],
    [original_observation_matrix, [1.]]
  ]
  augmented_observation_matrix = [original_observation_matrix, [1.]]
  ```

  """
  def __init__(self, original_ssm, name=..., **linear_gaussian_ssm_kwargs) -> None:
    ...
  
  @property
  def original_ssm(self): # -> Any:
    ...
  


class AutoregressiveIntegratedMovingAverage(StructuralTimeSeries):
  """Represents an autoregressive integrated moving-average (ARIMA) model.

  An [autoregressive moving-average (ARMA)](
  https://en.wikipedia.org/wiki/Autoregressive_moving_average_model) process is
  defined by the recursion

  ```
  level[t + 1] = (
      level_drift
      + noise[t + 1]
      + sum(ar_coefficients * levels[t : t - order : -1])
      + sum(ma_coefficients * noise[t : t - order : -1]))
    noise[t + 1] ~ Normal(0., scale=level_scale)
    ```

  where `noise` is an iid noise process. An integrated ([ARIMA](
  https://en.wikipedia.org/wiki/Autoregressive_integrated_moving_average))
  process corresponds to an ARMA model of the
  `integration_degree`th-order differences of a sequence, or equivalently,
  taking `integration_degree` cumulative sums of an underlying ARMA process.
  """
  def __init__(self, ar_order, ma_order, integration_degree=..., ar_coefficients_prior=..., ma_coefficients_prior=..., level_drift_prior=..., level_scale_prior=..., initial_state_prior=..., ar_coefficient_constraining_bijector=..., ma_coefficient_constraining_bijector=..., observed_time_series=..., name=...) -> None:
    """Specifies an ARIMA(p=ar_order, d=integration_degree, q=ma_order) model.

    Args:
      ar_order: scalar Python positive `int` specifying the order of the
        autoregressive process (`p` in `ARIMA(p, d, q)`).
      ma_order: scalar Python positive `int` specifying the order of the
        moving-average process (`q` in `ARIMA(p, d, q)`).
      integration_degree: scalar Python positive `int` specifying the number
        of times to integrate an ARMA process. (`d` in `ARIMA(p, d, q)`).
        Default value: `0`.
      ar_coefficients_prior: optional `tfd.Distribution` instance specifying a
        prior on the `ar_coefficients` parameter. If `None`, a default standard
        normal (`tfd.MultivariateNormalDiag(scale_diag=tf.ones([ar_order]))`)
        prior is used.
        Default value: `None`.
      ma_coefficients_prior: optional `tfd.Distribution` instance specifying a
        prior on the `ma_coefficients` parameter. If `None`, a default standard
        normal (`tfd.MultivariateNormalDiag(scale_diag=tf.ones([ma_order]))`)
        prior is used.
        Default value: `None`.
      level_drift_prior: optional `tfd.Distribution` instance specifying a prior
        on the `level_drift` parameter. If `None`, the parameter is not inferred
        and is instead fixed to zero.
        Default value: `None`.
      level_scale_prior: optional `tfd.Distribution` instance specifying a prior
        on the `level_scale` parameter. If `None`, a heuristic default prior is
        constructed based on the provided `observed_time_series`.
        Default value: `None`.
      initial_state_prior: optional `tfd.Distribution` instance specifying a
        prior on the initial state, corresponding to the values of the process
        at a set of size `order` of imagined timesteps before the initial step.
        If `None`, a heuristic default prior is constructed based on the
        provided `observed_time_series`.
        Default value: `None`.
      ar_coefficient_constraining_bijector: optional `tfb.Bijector` instance
        representing a constraining mapping for the autoregressive coefficients.
        For example, `tfb.Tanh()` constrains the coefficients to lie in
        `(-1, 1)`, while `tfb.Softplus()` constrains them to be positive, and
        `tfb.Identity()` implies no constraint. If `None`, the default behavior
        constrains the coefficients to lie in `(-1, 1)` using a `Tanh` bijector.
        Default value: `None`.
      ma_coefficient_constraining_bijector: optional `tfb.Bijector` instance
        representing a constraining mapping for the moving average coefficients.
        For example, `tfb.Tanh()` constrains the coefficients to lie in
        `(-1, 1)`, while `tfb.Softplus()` constrains them to be positive, and
        `tfb.Identity()` implies no constraint. If `None`, the default behavior
        is to apply no constraint.
        Default value: `None`.
      observed_time_series: optional `float` `Tensor` of shape
        `batch_shape + [T, 1]` (omitting the trailing unit dimension is also
        supported when `T > 1`), specifying an observed time series. Any `NaN`s
        are interpreted as missing observations; missingness may be also be
        explicitly specified by passing a `tfp.sts.MaskedTimeSeries` instance.
        Any priors not explicitly set will be given default values according to
        the scale of the observed time series (or batch of time series).
        Default value: `None`.
      name: the name of this model component.
        Default value: 'ARIMA'.
    """
    ...
  
  @property
  def initial_state_prior(self):
    ...
  
  @property
  def integration_degree(self): # -> int:
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.internal import tf_keras

"""DenseVariational layer."""
class DenseVariational(tf_keras.layers.Layer):
  """Dense layer with random `kernel` and `bias`.

  This layer uses variational inference to fit a "surrogate" posterior to the
  distribution over both the `kernel` matrix and the `bias` terms which are
  otherwise used in a manner similar to `tf_keras.layers.Dense`.

  This layer fits the "weights posterior" according to the following generative
  process:

  ```none
  [K, b] ~ Prior()
  M = matmul(X, K) + b
  Y ~ Likelihood(M)
  ```

  """
  def __init__(self, units, make_posterior_fn, make_prior_fn, kl_weight=..., kl_use_exact=..., activation=..., use_bias=..., activity_regularizer=..., **kwargs) -> None:
    """Creates the `DenseVariational` layer.

    Args:
      units: Positive integer, dimensionality of the output space.
      make_posterior_fn: Python callable taking `tf.size(kernel)`,
        `tf.size(bias)`, `dtype` and returns another callable which takes an
        input and produces a `tfd.Distribution` instance.
      make_prior_fn: Python callable taking `tf.size(kernel)`, `tf.size(bias)`,
        `dtype` and returns another callable which takes an input and produces a
        `tfd.Distribution` instance.
      kl_weight: Amount by which to scale the KL divergence loss between prior
        and posterior.
      kl_use_exact: Python `bool` indicating that the analytical KL divergence
        should be used rather than a Monte Carlo approximation.
      activation: Activation function to use.
        If you don't specify anything, no activation is applied
        (ie. "linear" activation: `a(x) = x`).
      use_bias: Boolean, whether the layer uses a bias vector.
      activity_regularizer: Regularizer function applied to
        the output of the layer (its "activation")..
      **kwargs: Extra arguments forwarded to `tf_keras.layers.Layer`.
    """
    ...
  
  def build(self, input_shape): # -> None:
    ...
  
  def call(self, inputs):
    ...
  
  def compute_output_shape(self, input_shape):
    """Computes the output shape of the layer.

    Args:
      input_shape: `TensorShape` or `list` of `TensorShape`
        (only last dim is used)
    Returns:
      The output shape.
    Raises:
        ValueError: If the innermost dimension of `input_shape` is not defined.
    """
    ...
  



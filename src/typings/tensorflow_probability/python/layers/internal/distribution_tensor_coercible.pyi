"""
This type stub file was generated by pyright.
"""

import six
from tensorflow_probability.python.distributions import distribution as tfd
from tensorflow_probability.python.util.deferred_tensor import TensorMetaClass

"""Class which enables `tfd.Distribution` to `tf.Tensor` coercion."""
__all__ = []
_NOT_FOUND = ...
class _DistributionAndTensorCoercibleMeta(type(tfd.Distribution), TensorMetaClass):
  ...


@six.add_metaclass(_DistributionAndTensorCoercibleMeta)
class _TensorCoercible(tfd.Distribution):
  """Docstring."""
  def __init__(self, distribution, convert_to_tensor_fn=...) -> None:
    ...
  
  def __setattr__(self, name, value): # -> None:
    """Support self.foo = trackable syntax.

    Redefined from `tensorflow/python/trackable/tracking.py` to avoid
    calling `getattr`, which causes an infinite loop.

    Args:
      name: str, name of the attribute to be set.
      value: value to be set.
    """
    ...
  
  def __getattr__(self, name): # -> Any:
    ...
  
  def sample(self, sample_shape=..., seed=..., name=..., **kwargs):
    ...
  
  @property
  def shape(self): # -> Callable[[], Any]:
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.math.psd_kernels import positive_semidefinite_kernel as psd_kernel

"""The SpectralMixture kernel."""
__all__ = ['SpectralMixture']
class SpectralMixture(psd_kernel.AutoCompositeTensorPsdKernel):
  """The SpectralMixture kernel.

  This kernel is derived from parameterizing the spectral density of a
  stationary kernel by a mixture of `m` diagonal multivariate normal
  distributions [1].

  This in turn parameterizes the following kernel:

    ```none
    k(x, y) = sum_j w[j] (prod_i
        exp(-2 * (pi * (x[i] - y[i]) * s[j][i])**2) *
        cos(2 * pi * (x[i] - y[i]) * m[j][i]))
    ```

  where:
    * `j` is the number of mixtures (as mentioned above).
    * `w[j]` are the mixture weights.
    * `m[j]` and `s[j]` parameterize a `MultivariateNormalDiag(m[j], s[j])`.
      In other words, they are the mean and diagonal scale for each mixture
      component.

  NOTE: This kernel can result in negative off-diagonal entries.

  #### References
  [1]: A. Wilson, R. P. Adams.
       Gaussian Process Kernels for Pattern Discovery and Extrapolation.
       https://arxiv.org/abs/1302.4245
  """
  def __init__(self, logits, locs, scales, feature_ndims=..., validate_args=..., name=...) -> None:
    """Construct a SpectralMixture kernel instance.

    Args:
      logits: Floating-point `Tensor` of shape `[..., M]`, whose softmax
        represents the mixture weights for the spectral density. Must
        be broadcastable with `locs` and `scales`.
      locs: Floating-point `Tensor` of shape `[..., M, F1, F2, ... FN]`, which
        represents the location parameter of each of the `M` mixture components.
        `N` is `feature_ndims`. Must be broadcastable with `logits` and
        `scales`.
      scales: Positive Floating-point `Tensor` of shape
        `[..., M, F1, F2, ..., FN]`, which represents the scale parameter of
        each of the `M` mixture components. `N` is `feature_ndims`. Must be
        broadcastable with `locs` and `logits`. These parameters act like
        inverse length scale parameters.
      feature_ndims: Python `int` number of rightmost dims to include in the
        squared difference norm in the exponential.
      validate_args: If `True`, parameters are checked for validity despite
        possibly degrading runtime performance
      name: Python `str` name prefixed to Ops created by this class.
    """
    ...
  
  @property
  def logits(self):
    """Logits parameter."""
    ...
  
  @property
  def locs(self):
    """Location parameter."""
    ...
  
  @property
  def scales(self):
    """Scale parameter."""
    ...
  



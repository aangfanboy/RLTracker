"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""Bijector to associate a numeric inverse with any invertible function."""
__all__ = ['ScalarFunctionWithInferredInverse']
class ScalarFunctionWithInferredInverse(bijector.Bijector):
  """Bijector to associate a numeric inverse with any invertible function."""
  def __init__(self, fn, domain_constraint_fn=..., root_search_fn=..., max_iterations=..., require_convergence=..., additional_scalar_parameters_requiring_gradients=..., dtype=..., validate_args=..., name=...) -> None:
    """Initialize the ScalarFunctionWithInferredInverse bijector.

    Args:
      fn: Python `callable` taking a single Tensor argument `x`, and returning a
        Tensor `y` of the same shape. This is assumed to be an invertible
        (continuous and monotonic) function applied elementwise to `x`.
      domain_constraint_fn: optional Python `callable` that returns values
        within the domain of `fn`, used to constrain the root search. For any
        real-valued input `r`, the value `x = domain_constraint_fn(r)` should be
        a valid input to `fn`.
        Default value: `None`.
      root_search_fn: Optional Python `callable` used to search for roots of an
        objective function. This should have signature
        `root_search_fn(objective_fn, initial_x, max_iterations=None)`
        and return a tuple containing three `Tensor`s
        `(estimated_root, objective_at_estimated_root, num_iterations)`.
        Default value: `tfp.math.secant_root`.
      max_iterations: Optional Python integer maximum number of iterations to
        run the root search algorithm.
        Default value: `50`.
      require_convergence: Optional Python `bool` indicating whether to return
        inverse values when the root-finding algorithm may not have
        converged. If `True`, such values are replaced by `NaN`.
        Default value: `True`.
      additional_scalar_parameters_requiring_gradients: Optional list of
        additional Tensor parameters with respect to which `fn` is
        differentiable. Each parameter is a (batch of) scalar(s) whose shape
        must broadcast with the shapes of `x` and `y`. Parameters are passed as
        `fn(x, *additional_scalar_parameters_requiring_gradients)`;
        explicitly passing a parameter ensures that calls to `inverse` and
        `inverse_log_det_jacobian` will generate correct gradients to that
        parameter. Parameters *not* passed here (for example,
        anything in the closure of `fn`) will not, in general, receive
        gradients.
        Default value: `()`.
      dtype: `tf.dtype` supported by this `Bijector`. `None` means dtype is not
        enforced.
        Default value: `None`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
        Default value: `scalar_function_with_inferred_inverse`.
    """
    ...
  
  @property
  def domain_constraint_fn(self): # -> Callable[..., Any]:
    ...
  
  @property
  def fn(self): # -> Any:
    ...
  
  @property
  def max_iterations(self): # -> int:
    ...
  
  @property
  def require_convergence(self): # -> bool:
    ...
  
  @property
  def root_search_fn(self):
    ...
  
  @property
  def bound_fn(self): # -> Callable[..., Any]:
    """Forward `fn` with any extra args bound, so that `y = bound_fn(x)`."""
    ...
  



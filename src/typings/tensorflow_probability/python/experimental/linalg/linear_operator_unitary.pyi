"""
This type stub file was generated by pyright.
"""

import tensorflow.compat.v2 as tf

"""A kernel covariance matrix LinearOperator."""
class LinearOperatorUnitary(tf.linalg.LinearOperator):
  """Encapsulates a Unitary Linear Operator."""
  def __init__(self, matrix, is_non_singular=..., is_self_adjoint=..., is_positive_definite=..., is_square=..., name=...) -> None:
    r"""Initialize a `LinearOperatorUnitary`.

    A Unitary Operator is one for which U* = U^-1. That is, the inverse of this
    operator is equivalent to the conjugate transpose of the operator. In the
    case that this operator is of real dtype, this corresponds to an orthogonal
    operator.

    This is useful as it reduces the complexity of `solve` to that of a
    `matmul` with the transpose operator.

    Args:
      matrix:  Shape `[B1,...,Bb, N, N]` `Tensor` with `b >= 0` `N >= 0`.
        The orthogonal matrix.
      is_non_singular:  Expect that this operator is non-singular.
      is_self_adjoint:  Expect that this operator is equal to its hermitian
        transpose.  If `diag.dtype` is real, this is auto-set to `True`.
      is_positive_definite:  Expect that this operator is positive definite,
        meaning the quadratic form `x^H A x` has positive real part for all
        nonzero `x`.  Note that we do not require the operator to be
        self-adjoint to be positive-definite.  See:
        https://en.wikipedia.org/wiki/Positive-definite_matrix#Extension_for_non-symmetric_matrices
      is_square:  Expect that this operator acts like square [batch] matrices.
      name: A name for this `LinearOperator`.
    """
    ...
  
  @property
  def matrix(self):
    ...
  



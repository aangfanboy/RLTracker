"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution

"""The MultiTaskGaussianProcess distribution class."""
class MultiTaskGaussianProcess(distribution.AutoCompositeTensorDistribution):
  """Marginal distribution of a Multitask GP at finitely many points."""
  def __init__(self, kernel, index_points=..., mean_fn=..., observation_noise_variance=..., cholesky_fn=..., validate_args=..., allow_nan_stats=..., name=...) -> None:
    """Constructs a MultiTaskGaussianProcess instance.

    Args:
      kernel: `MultiTaskKernel`-like instance representing the
        GP's covariance function.
      index_points: (Nested) `float` `Tensor` representing finite collection, or
        batch of collections, of points in the index set over which the GP is
        defined. Shape (of shape of each nested component) has the form
        `[b1, ..., bB, e, f1, ..., fF]` where `F` is the number of feature
        dimensions and must equal `kernel.feature_ndims` (or its corresponding
        nested component) and `e` is the number (size) of index points in each
        batch. Ultimately this distribution corresponds to an `e`-dimensional
        multivariate normal. The batch shape must be broadcastable with
        `kernel.batch_shape`.
      mean_fn: Python `callable` that acts on `index_points` to produce a
        (batch of) collection of mean values at `index_points`. Takes a (nested)
        `Tensor` of shape `[b1, ..., bB, e, f1, ..., fF]` and returns a `Tensor`
        whose shape is broadcastable with `[b1, ..., bB, e, t]`, where `t` is
        the number of tasks.
      observation_noise_variance: `float` `Tensor` representing the variance
        of the noise in the Normal likelihood distribution of the model. May be
        batched, in which case the batch shape must be broadcastable with the
        shapes of all other batched parameters (`kernel.batch_shape`,
        `index_points`, etc.).
        Default value: `0.`
      cholesky_fn: Callable which takes a single (batch) matrix argument and
        returns a Cholesky-like lower triangular factor.  Default value: `None`,
        in which case `make_cholesky_with_jitter_fn(1e-6)` is used.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
        Default value: `False`.
      allow_nan_stats: Python `bool`, default `True`. When `True`,
        statistics (e.g., mean, mode, variance) use the value `NaN` to
        indicate the result is undefined. When `False`, an exception is raised
        if one or more of the statistic's batch members are undefined.
        Default value: `False`.
      name: Python `str` name prefixed to Ops created by this class.
        Default value: 'MultiTaskGaussianProcess'.
    """
    ...
  
  def posterior_predictive(self, observations, observations_is_missing=..., predictive_index_points=..., **kwargs): # -> MultiTaskGaussianProcessRegressionModel:
    """Return the posterior predictive distribution associated with this distribution.

    Returns the posterior predictive distribution `p(Y' | X, Y, X')` where:
      * `X'` is `predictive_index_points`
      * `X` is `self.index_points`.
      * `Y` is `observations`.

    This is equivalent to using the
    `MultiTaskGaussianProcessRegressionModel.precompute_regression_model`
    method.

    WARNING: This method assumes `predictive_index_points` is the only varying
    parameter (i.e. is a `Variable` / changes after initialization) and hence
    is not tape-safe.

    Args:
      observations: `float` `Tensor` representing collection, or batch of
        collections, of observations corresponding to
        `self.index_points`. Shape has the form `[b1, ..., bB, t, e]`, where
        `t` is the number of tasks. The batch shape `[b1, ..., bB]` must be
        broadcastable with the shapes of all other batched parameters
      observations_is_missing:  `bool` `Tensor` of shape `[..., e, t]`,
        representing a batch of boolean masks.  When
        `observations_is_missing` is not `None`, this distribution is
        conditioned only on the observations for which the
        corresponding elements of `observations_is_missing` are `False`.
      predictive_index_points: (Nested) `float` `Tensor` representing finite
        collection, or batch of collections, of points in the index set over
        which the GP is defined.
        Shape (or shape of each nested component) has the form
        `[b1, ..., bB, e, f1, ..., fF]` where `F` is the number of feature
        dimensions and must equal `kernel.feature_ndims` (or its corresponding
        nested component) and `e` is the number (size) of predictive index
        points in each batch. The batch shape must be broadcastable with this
        distributions `batch_shape`.
        Default value: `None`.
      **kwargs: Any other keyword arguments to pass / override.

    Returns:
      mtgprm: An instance of `Distribution` that represents the posterior
        predictive.
    """
    ...
  
  @property
  def mean_fn(self): # -> Callable[..., object] | Callable[..., Any]:
    ...
  
  @property
  def kernel(self): # -> MultiTaskKernel:
    ...
  
  @property
  def index_points(self): # -> None:
    ...
  
  @property
  def observation_noise_variance(self):
    ...
  
  @property
  def cholesky_fn(self): # -> Callable[..., object]:
    ...
  



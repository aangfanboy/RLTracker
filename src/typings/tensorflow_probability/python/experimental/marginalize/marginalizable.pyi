"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import joint_distribution_coroutine as jdc_lib

"""Marginalizable probability distributions."""
__all__ = ['MarginalizableJointDistributionCoroutine']
class Marginalizable:
  """Marginazlization mixin.

  This enables a joint distribution class to compute marginalized
  log probabilities.
  """
  def marginalized_log_prob(self, values, name=..., method=..., internal_type=...):
    """Log probability density/mass function.

    Args:
      values: Structure of `Tensor`-values corresponding to samples yielded
        by model. There are also two special values that can be provided
        instead of `Tensor` samples.
        'marginalize': treat this random variable as a latent variable
        that will be marginalized out by summing over the support of
        the variable.
        'tabulate': treat this as a latent variable whose posterior probability
        distribution is to be computed. The final result is a tensor
        of log probabilities with each tabulated variable corresponding to
        one axis of the tensor in the order they appear in the list
        of `values`.
      name: Python `str` prepended to names of ops created by this function.
      method: Specifies method by which marginalization is carried out.
        'einsum': use `einsum`. For very small probabilities this may
        result in underflow causing log probabilities of `-inf` even when
        the result shoukd be finite.
        'logeinsumexp': performs an `einsum` designed to work in log space.
        Although it preserves precision better than the 'einsum' method it
        can be slow and use more memory.
      internal_type: because the `einsum` method can cause underflow this
        argument allows the user to specify the type in which the
        `einsum` is computed. For example `tf.float64`.

    Returns:
      Return log probability density/mass of `value` for this distribution.

    Notes:
      Currently only a single log probability can be computed, so lists or
      tensors containing multiple samples from the joint distribution are
      not supported.
      The number of latent (i.e. marginalized or tabulated) variables is
      limited to 52 in this version.
      The individual samples in `tfd.Sample` are mathematically independent
      but the marginalization algorithm used is unable to exploit this fact,
      meaning that computation time can easily grow exponentially with
      `sample_shape`.
    """
    ...
  


class MarginalizableJointDistributionCoroutine(jdc_lib.JointDistributionCoroutine, Marginalizable):
  ...



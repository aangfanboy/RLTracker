"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution as distribution_lib
from tensorflow_probability.python.experimental.nn import layers as layers_lib

"""Base class for variational layers for building neural networks."""
__all__ = ['VariationalLayer']
tfd = distribution_lib
def unpack_kernel_and_bias(weights): # -> tuple[Any, Any | None]:
  """Returns `kernel`, `bias` tuple."""
  ...

class VariationalLayer(layers_lib.Layer):
  """Base class for all variational layers."""
  def __init__(self, posterior, prior, activation_fn=..., posterior_value_fn=..., seed=..., dtype=..., validate_args=..., name=...) -> None:
    """Base class for variational layers.

    Args:
      posterior: ...
      prior: ...
      activation_fn: ...
      posterior_value_fn: ...
      seed: ...
      dtype: ...
      validate_args: ...
      name: Python `str` prepeneded to ops created by this object.
        Default value: `None` (i.e., `type(self).__name__`).
    """
    ...
  
  @property
  def dtype(self):
    ...
  
  @property
  def posterior(self): # -> Any:
    ...
  
  @property
  def prior(self): # -> Any:
    ...
  
  @property
  def activation_fn(self): # -> None:
    ...
  
  @property
  def posterior_value_fn(self):
    ...
  
  @property
  def posterior_value(self): # -> None:
    ...
  


class VariationalReparameterizationKernelBiasLayer(VariationalLayer):
  """Variational reparameterization linear layer."""
  def __init__(self, posterior, prior, apply_kernel_fn, activation_fn=..., posterior_value_fn=..., unpack_weights_fn=..., seed=..., dtype=..., validate_args=..., name=...) -> None:
    ...
  
  @property
  def unpack_weights_fn(self):
    ...
  
  def __call__(self, x, **kwargs):
    ...
  


class VariationalFlipoutKernelBiasLayer(VariationalLayer):
  """Variational flipout linear layer."""
  def __init__(self, posterior, prior, apply_kernel_fn, activation_fn=..., posterior_value_fn=..., unpack_weights_fn=..., seed=..., dtype=..., validate_args=..., name=...) -> None:
    ...
  
  @property
  def unpack_weights_fn(self):
    ...
  
  def __call__(self, x, **kwargs):
    ...
  


def get_spherical_normal_loc_scale(d): # -> tuple[Any, Any]:
  ...


"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.experimental.bayesopt.acquisition import acquisition_function

"""Max-Value Entropy Search Acquisition Function."""
class GaussianProcessMaxValueEntropySearch(acquisition_function.AcquisitionFunction):
  """Max-value entropy search acquisition function.

  Computes the sequential max-value entropy search acquisition function.

  Requires that `predictive_distribution` has a `.mean`, `stddev` method.

  #### Examples

  Build and evaluate a Gausian Process Maximum Value Entropy Search acquisition
  function.

  ```python
  import numpy as np
  import tensorflow_probability as tfp

  tfd = tfp.distributions
  tfpk = tfp.math.psd_kernels
  tfp_acq = tfp.experimental.bayesopt.acquisition

  # Sample 10 20-dimensional index points and associated observations.
  index_points = np.random.uniform(size=[10, 20])
  observations = np.random.uniform(size=[10])

  # Build a Gaussian Process regression model.
  dist = tfd.GaussianProcessRegressionModel(
      kernel=tfpk.MaternFiveHalves(),
      observation_index_points=index_points,
      observations=observations)

  # Define a GP max value entropy search acquisition function.
  gp_mes = tfp_acq.GaussianProcessMaxValueEntropySearch(
      predictive_distribution=dist,
      observations=observations,
      num_max_value_samples=200)

  # Evaluate the acquisition function at a set of predictive index points.
  pred_index_points = np.random.uniform(size=[6, 20])
  acq_fn_vals = gp_mes(pred_index_points)
  ```

  #### References
  [1] Z. Wang, S. Jegelka. Max-value Entropy Search for Efficient Bayesian
      Optimization. https://arxiv.org/abs/1703.01968

  """
  def __init__(self, predictive_distribution, observations, seed=..., num_max_value_samples=...) -> None:
    """Constructs a max-value entropy search acquisition function.

    Args:
      predictive_distribution: `tfd.Distribution`-like, the distribution over
        observations at a set of index points.
      observations: `Float` `Tensor` of observations. Shape has the form
        `[b1, ..., bB, e]`, where `e` is the number of index points (such that
        the event shape of `predictive_distribution` is `[e]`) and
        `[b1, ..., bB]` is broadcastable with the batch shape of
        `predictive_distribution`.
      seed: PRNG seed; see tfp.random.sanitize_seed for details.
      num_max_value_samples: The number of samples to use for the max-value
        distribution.
    """
    ...
  
  @property
  def num_max_value_samples(self): # -> int:
    ...
  
  def __call__(self, **kwargs):
    """Computes the max-value entropy search acquisition function.

    Args:
      **kwargs: Keyword args passed on to the `mean` and `stddev` methods of
        `predictive_distribution`.

    Returns:
      Acquisition function values at index points implied by
      `predictive_distribution` (or overridden in `**kwargs`).
    """
    ...
  


def fit_max_value_distribution(predictive_distribution, observations, num_grid_points=..., seed=...): # -> Gumbel:
  """Computes a Gumbel approximation to the max-value distribution p(y* | D)."""
  ...

def inverse_mills_ratio(x):
  """Compute the ratio of the Normal PDF and the Normal CDF."""
  ...


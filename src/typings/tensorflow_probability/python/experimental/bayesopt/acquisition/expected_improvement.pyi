"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.experimental.bayesopt.acquisition import acquisition_function

"""Expected Improvement."""
class ParallelExpectedImprovement(acquisition_function.AcquisitionFunction):
  """Parallel expected improvement acquisition function.

  Computes the q-EI from a multivariate observation model. This is also known as
  batch expected improvement.

  Requires that `predictive_distribution` has a `sample` method.

  #### Examples

  Build and evaluate a Parallel Expected Improvement acquisition function.

  ```python
  import numpy as np
  import tensorflow_probability as tfp

  tfd = tfp.distributions
  tfpk = tfp.math.psd_kernels
  tfp_acq = tfp.experimental.bayesopt.acquisition

  # Sample 10 20-dimensional index points and associated observations.
  index_points = np.random.uniform(size=[10, 20])
  observations = np.random.uniform(size=[10])

  # Build a Student T Process regression model conditioned on observed data.
  dist = tfd.StudentTProcessRegressionModel(
      kernel=tfpk.ExponentiatedQuadratic(),
      df=5.,
      observation_index_points=index_points,
      observations=observations)

  # Define a Parallel Expected Improvement acquisition function.
  stp_pei = tfp_acq.ParallelExpectedImprovement(
      predictive_distribution=dist,
      observations=observations,
      num_samples=10_000)

  # Evaluate the acquisition function at a new set of index points.
  pred_index_points = np.random.uniform(size=[6, 20])
  acq_fn_vals = stp_pei(pred_index_points)  # Has shape [6].
  ```

  """
  def __init__(self, predictive_distribution, observations, seed=..., exploration=..., num_samples=..., transform_fn=...) -> None:
    """Constructs a Parallel Expected Improvement acquisition function.

    Args:
      predictive_distribution: `tfd.Distribution`-like, the distribution over
        observations at a set of index points. Must have a `sample` method.
      observations: `Float` `Tensor` of observations. Shape has the form
        `[b1, ..., bB, e]`, where `e` is the number of index points (such that
        the event shape of `predictive_distribution` is `[e]`) and
        `[b1, ..., bB]` is broadcastable with the batch shape of
        `predictive_distribution`.
      seed: PRNG seed; see tfp.random.sanitize_seed for details.
      exploration: Exploitation-exploration trade-off parameter.
      num_samples: The number of samples to use for the Parallel Expected
        Improvement approximation.
      transform_fn: Optional Python `Callable` that transforms objective values.
        This is used for optimizing a composite grey box function `g(f(x))`
        where `f` is our black box function and `g` is `transform_fn`.
    """
    ...
  
  @property
  def exploration(self): # -> float:
    ...
  
  @property
  def num_samples(self): # -> int:
    ...
  
  @property
  def transform_fn(self): # -> None:
    ...
  
  @property
  def is_parallel(self): # -> Literal[True]:
    ...
  
  def __call__(self, **kwargs):
    """Computes the Parallel Expected Improvement.

    Args:
      **kwargs: Keyword args passed on to the `sample` method of
        `predictive_distribution`.

    Returns:
      Parallel Expected improvements at index points implied by
      `predictive_distribution` (or overridden in `**kwargs`).
    """
    ...
  


class StudentTProcessExpectedImprovement(acquisition_function.AcquisitionFunction):
  """Student-T Process expected improvement acquisition function.

  Computes the analytic sequential expected improvement for a Student-T process
  model.

  Requires that `predictive_distribution` has a `mean`, `stddev` method.

  #### Examples

  Build and evaluate a Student T Process Expected Improvement acquisition
  function.

  ```python
  import numpy as np
  import tensorflow_probability as tfp

  tfd = tfp.distributions
  tfpk = tfp.math.psd_kernels
  tfp_acq = tfp.experimental.bayesopt.acquisition

  # Sample 10 5-dimensional index points and associated observations.
  index_points = np.random.uniform(size=[10, 5])
  observations = np.random.uniform(size=[10])

  # Build a Student T Process regression model over the function values at
  # `predictive_index_points` conditioned on observations.
  predictive_index_points = np.random.uniform(size=[8, 5])
  dist = tfd.StudentTProcessRegressionModel(
      kernel=tfpk.MaternFiveHalves(),
      df=5.,
      observation_index_points=index_points,
      observations=observations,
      predictive_index_points=predictive_index_points)

  # Define a Student T Process Expected Improvement acquisition function.
  stp_ei = tfp_acq.StudentTProcessExpectedImprovement(
      predictive_distribution=dist,
      observations=observations,
      exploration=0.02)

  # Evaluate the acquisition function at `predictive_index_points`.
  acq_fn_vals = stp_ei()  # Has shape [8].

  # Evaluate the acquisition function at a new set of predictive index points.
  new_pred_index_points = np.random.uniform(size=[6, 5])
  acq_fn_vals = stp_ei(pred_index_points)  # Has shape [6].
  ```

  """
  def __init__(self, predictive_distribution, observations, seed=..., exploration=...) -> None:
    """Compute Expected Improvement w.r.t a Student-T Process analytically.

    Args:
      predictive_distribution: `tfd.Distribution`-like, the distribution over
        observations at a set of index points. Must have `mean`, `stddev`
        methods.
      observations: `Float` `Tensor` of observations. Shape has the form
        `[b1, ..., bB, e]`, where `e` is the number of index points (such that
        the event shape of `predictive_distribution` is `[e]`) and
        `[b1, ..., bB]` is broadcastable with the batch shape of
        `predictive_distribution`.
      seed: PRNG seed; see tfp.random.sanitize_seed for details.
      exploration: Exploitation-exploration trade-off parameter.
    """
    ...
  
  @property
  def exploration(self): # -> float:
    ...
  
  def __call__(self, **kwargs):
    """Computes the Student-T process expected improvement.

    Args:
      **kwargs: Keyword args passed on to the `mean` and `stddev` methods of
        `predictive_distribution`.

    Returns:
      Expected improvements at index points implied by `predictive_distribution`
      (or overridden in `**kwargs`).
    """
    ...
  


class GaussianProcessExpectedImprovement(acquisition_function.AcquisitionFunction):
  """Gaussian Process expected improvement acquisition function.

  Computes the analytic sequential expected improvement for a Gaussian process
  model.

  Requires that `predictive_distribution` has a `mean`, `stddev` method.

  #### Examples

  Build and evaluate a Gausian Process Expected Improvement acquisition
  function.

  ```python
  import numpy as np
  import tensorflow_probability as tfp

  tfd = tfp.distributions
  tfpk = tfp.math.psd_kernels
  tfp_acq = tfp.experimental.bayesopt.acquisition

  # Sample 10 20-dimensional index points and associated observations.
  index_points = np.random.uniform(size=[10, 20])
  observations = np.random.uniform(size=[10])

  # Build a Gaussian Process regression model over the function values at
  # `predictive_index_points` conditioned on observations.
  predictive_index_points = np.random.uniform(size=[8, 20])
  dist = tfd.GaussianProcessRegressionModel(
      kernel=tfpk.MaternFiveHalves(),
      observation_index_points=index_points,
      observations=observations,
      predictive_index_points=predictive_index_points)

  # Define a GP Expected Improvement acquisition function.
  gp_ei = tfp_acq.GaussianProcessExpectedImprovement(
      predictive_distribution=dist,
      observations=observations)

  # Evaluate the acquisition function at `predictive_index_points`.
  acq_fn_vals = gp_ei()

  # Evaluate the acquisition function at a new set of predictive index points.
  pred_index_points = np.random.uniform(size=[6, 20])
  acq_fn_vals = gp_ei(pred_index_points)
  ```

  """
  def __init__(self, predictive_distribution, observations, seed=..., exploration=...) -> None:
    """Compute Expected Improvement w.r.t a Gaussian Process analytically.

    Args:
      predictive_distribution: `tfd.Distribution`-like, the distribution over
        observations at a set of index points. Must have `mean`, `stddev`
        methods.
      observations: `Float` `Tensor` of observations.
      seed: PRNG seed; see tfp.random.sanitize_seed for details.
      exploration: Exploitation-exploration trade-off parameter.
    """
    ...
  
  @property
  def exploration(self): # -> float:
    ...
  
  def __call__(self, **kwargs):
    """Computes analytic GP expected improvement.

    Args:
      **kwargs: Keyword args passed on to the `mean` and `stddev` methods of
        `predictive_distribution`.

    Returns:
      Expected improvements at index points implied by `predictive_distribution`
      (or overridden in `**kwargs`).
    """
    ...
  


def normal_expected_improvement(best_observed, mean, stddev, exploration=...):
  """Normal distribution expected improvement.

  Args:
    best_observed: Array of best (largest) observed values. Must broadcast with
      `mean` and `stddev`.
    mean: Array of predicted means. Must broadcast with `best_observed` and
      `stddev`.
    stddev: Array of predicted standard deviations. Must broadcast with
      `best_observed` and `mean`.
    exploration: Float parameter controlling the exploration/exploitation
      tradeoff.

  Returns:
    ei: Array of expected improvement values.
  """
  ...

def student_t_expected_improvement(best_observed, df, mean, stddev, exploration=...):
  """Student-T distribution expected improvement.

  Args:
    best_observed: Array of best (largest) observed values. Must broadcast with
      `mean` and `stddev`.
    df: Student T degrees of freedom.
    mean: Array of predicted means. Must broadcast with `best_observed` and
      `stddev`.
    stddev: Array of predicted standard deviations. Must broadcast with
      `best_observed` and `mean`.
    exploration: Float parameter controlling the exploration/exploitation
      tradeoff.

  Returns:
    ei: Array of expected improvement values.
  """
  ...


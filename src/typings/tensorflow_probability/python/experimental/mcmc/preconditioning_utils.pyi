"""
This type stub file was generated by pyright.
"""

"""DiagonalMassMatrixAdaptation TransitionKernel."""
__all__ = ['make_momentum_distribution']
JAX_MODE = ...
NUMPY_MODE = ...
def make_momentum_distribution(state_parts, batch_shape, running_variance_parts=..., shard_axis_names=...): # -> tensorflow_probability.python.experimental.distribute.joint_distribution.JointDistributionSequential | tensorflow_probability.python.distributions.joint_distribution_sequential.JointDistributionSequential:
  """Construct a momentum distribution from the running variance.

  This uses a running variance to construct a momentum distribution with the
  correct batch_shape and event_shape.

  Args:
    state_parts: List of `Tensor`.
    batch_shape: Batch shape.
    running_variance_parts: Optional, list of `Tensor`
       outputs of `tfp.experimental.stats.RunningVariance.variance()`. Defaults
       to ones with the same shape as state_parts.
    shard_axis_names: A structure of string names indicating how members of the
      state are sharded.

  Returns:
    `tfd.Distribution` where `.sample` has the same structure as `state_parts`,
    and `.log_prob` of the sample will have the rank of `batch_ndims`
  """
  ...

def update_momentum_distribution(momentum_distribution, running_variance_parts):
  """Updates a momentum distribution with new running variance.

  Args:
    momentum_distribution: Distribution arranged like a result of
      `make_momentum_distribution`.
    running_variance_parts: List of `Tensor` outputs of
      `tfp.experimental.stats.RunningVariance.variance()`.

  Returns:
    `tfd.Distribution` where `.sample` has the same structure as `state_parts`,
    and `.log_prob` of the sample will have the rank of `batch_ndims`
  """
  ...

def maybe_make_list_and_batch_broadcast(momentum_distribution, batch_shape): # -> JointDistributionSequential:
  """Makes the distribution list-like and batched, if possible."""
  ...


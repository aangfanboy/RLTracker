"""
This type stub file was generated by pyright.
"""

import collections
from tensorflow_probability.python.mcmc import kernel as kernel_base
from tensorflow_probability.python.mcmc.internal import util as mcmc_util

"""Sample Discarding Kernel for Thinning and Burn-in."""
__all__ = ['SampleDiscardingKernel']
class SampleDiscardingKernelResults(mcmc_util.PrettyNamedTupleMixin, collections.namedtuple('SampleDiscardingKernelResults', ['call_counter', 'inner_results'])):
  __slots__ = ...


class SampleDiscardingKernel(kernel_base.TransitionKernel):
  """Appropriately discards samples to conduct thinning and burn-in.

  `SampleDiscardingKernel` is a composable `TransitionKernel` that
  applies thinning and burn-in to samples returned by its
  `inner_kernel`. All Transition Kernels wrapping it will only
  see non-discarded samples.

  The burn-in step conducts both burn-in and one step of thinning.
  In other words, the first call to `one_step` will skip
  `num_burnin_steps + num_steps_between_results` samples. All
  subsequent calls skip only `num_steps_between_results` samples.
  """
  def __init__(self, inner_kernel, num_burnin_steps=..., num_steps_between_results=..., name=...) -> None:
    """Instantiates this object.

    Args:
      inner_kernel: `TransitionKernel` whose `one_step` will generate
        MCMC results.
      num_burnin_steps: Integer or scalar `Tensor` representing the number
        of chain steps to take before starting to collect results.
        Defaults to 0 (i.e., no burn-in).
      num_steps_between_results: Integer or scalar `Tensor` representing
        the number of chain steps between collecting a result. Only one out
        of every `num_steps_between_samples + 1` steps is included in the
        returned results. Defaults to 0 (i.e., no thinning).
      name: Python `str` name prefixed to Ops created by this function.
        Default value: `None` (i.e., "sample_discarding_kernel").
    """
    ...
  
  def one_step(self, current_state, previous_kernel_results, seed=...): # -> tuple[Any, SampleDiscardingKernelResults]:
    """Collects one non-discarded chain state.

    Args:
      current_state: `Tensor` or Python `list` of `Tensor`s
        representing the current state(s) of the Markov chain(s),
      previous_kernel_results: `collections.namedtuple` containing `Tensor`s
        representing values from previous calls to this function (or from the
        `bootstrap_results` function).
      seed: PRNG seed; see `tfp.random.sanitize_seed` for details.

    Returns:
      new_chain_state: Newest non-discarded MCMC chain state drawn from
        the `inner_kernel`.
      kernel_results: `collections.namedtuple` of internal calculations used to
        advance the chain.
    """
    ...
  
  def bootstrap_results(self, init_state, inner_results=...): # -> SampleDiscardingKernelResults:
    """Instantiates a new kernel state with no calls.

    Args:
      init_state: `Tensor` or Python `list` of `Tensor`s representing the
        state(s) of the Markov chain(s).
      inner_results: Optional results tuple for the inner kernel.  Will be
        re-bootstrapped if omitted.

    Returns:
      kernel_results: `collections.namedtuple` of `Tensor`s representing
        internal calculations made within this function.
    """
    ...
  
  @property
  def is_calibrated(self):
    ...
  
  @property
  def inner_kernel(self): # -> str:
    ...
  
  @property
  def num_burnin_steps(self): # -> str:
    ...
  
  @property
  def num_steps_between_results(self): # -> str:
    ...
  
  @property
  def name(self): # -> str:
    ...
  
  @property
  def parameters(self): # -> dict[str, Any | str]:
    ...
  



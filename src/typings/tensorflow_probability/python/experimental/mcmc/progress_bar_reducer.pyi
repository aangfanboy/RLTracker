"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.experimental.mcmc import reducer as reducer_base

"""`ProgressBarReducer` for showing progress bars."""
__all__ = ['ProgressBarReducer', 'make_tqdm_progress_bar_fn']
def make_tqdm_progress_bar_fn(description=..., leave=...): # -> Callable[..., Iterator[int]]:
  """Make a `progress_bar_fn` that uses `tqdm`.

  Args:
    description: `str` to display next to the progress bar, default is "".
    leave: Boolean whether to leave the progress bar up after finished.

  Returns:
    tqdm_progress_bar_fn: A function that takes an integer `num_steps` and
      returns a `tqdm` progress bar iterator.
  """
  ...

class ProgressBarReducer(reducer_base.Reducer):
  """`Reducer` that displays a progress bar.

  Note this is not XLA-compatible (`tf.function(jit_compile=True)`).
  Numpy and JAX substrates are not supported.

  Example usage:

  ```
  kernel = ...
  current_state = ...
  num_results = ...
  pbar = tfp.experimental.mcmc.ProgressBarReducer(num_results)
  _, final_state, kernel_results = tfp.experimental.mcmc.sample_fold(
      num_steps=num_results,
      current_state=current_state,
      kernel=kernel,
      reducer=pbar,
  )
  ```
  """
  def __init__(self, num_results, progress_bar_fn=...) -> None:
    """Instantiates a reducer that displays a progress bar.

    Args:
      num_results: Integer number of results to expect (as passed to sample
        chain).
      progress_bar_fn: A function that takes an integer `num_results` and
        returns an iterator that advances a progress bar. Defaults to `tqdm`
        progress bars (make sure they are pip installed befure using.)
    """
    ...
  
  def initialize(self, initial_chain_state, initial_kernel_results=...): # -> list[Any]:
    """Initialize progress bars.

    All arguments are ignored.

    Args:
      initial_chain_state: A (possibly nested) structure of `Tensor`s or Python
        `list`s of `Tensor`s representing the current state(s) of the Markov
        chain(s). It is used to infer the structure of future trace results.
      initial_kernel_results: A (possibly nested) structure of `Tensor`s
        representing internal calculations made in a related `TransitionKernel`.
        It is used to infer the structure of future trace results.

    Returns:
      state: empty list.
    """
    ...
  
  def one_step(self, new_chain_state, current_reducer_state, previous_kernel_results): # -> list[Any]:
    """Advance progress bar by one result.

    All arguments are ignored.

    Args:
      new_chain_state: A (possibly nested) structure of incoming chain state(s)
        with shape and dtype compatible with those used to initialize the
        `TracingState`.
      current_reducer_state: `TracingState`s representing all previously traced
        results.
      previous_kernel_results: A (possibly nested) structure of `Tensor`s
        representing internal calculations made in a related
        `TransitionKernel`.

    Returns:
      new_reducer_state: empty list.
    """
    ...
  
  @property
  def num_results(self): # -> Any:
    ...
  
  @property
  def progress_bar_fn(self): # -> Any:
    ...
  
  @property
  def parameters(self): # -> dict[str, Any]:
    ...
  



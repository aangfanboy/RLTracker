"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.mcmc import kernel

"""Module for sharding MCMC chains."""
class Sharded(kernel.TransitionKernel):
  """Shards a transition kernel across a named axis.

  Ordinarily, one can produce independent Markov chains from a single kernel by
  proving a batch of states but when using named axes inside of a map (say
  in the case of using JAX's `pmap`, `vmap`, or `xmap`), the kernel is provided
  with state without batch dimensions. In order to sample independently across
  the named axis, the PRNG seed across the named axis must be different. This
  can be accomplished by folding the named axis index into the random seed.
  A `Sharded` kernel does exactly this, creating independent chains across a
  named axis.
  """
  def __init__(self, inner_kernel, chain_axis_names, validate_args=..., name=...) -> None:
    """Constructs a `Sharded` transition kernel.

    Args:
      inner_kernel: A `TransitionKernel` to be sharded.
      chain_axis_names: A `str` or list of `str`s that determine the named axes
        that independent Markov chains will be sharded across.
      validate_args: Python `bool`. When `True` kernel parameters are checked
        for validity. When `False` invalid inputs may silently render incorrect
        outputs.
      name: Python `str` name prefixed to Ops created by this class.
    """
    ...
  
  def bootstrap_results(self, init_state):
    ...
  
  def one_step(self, current_state, previous_kernel_results, seed=...):
    ...
  
  @property
  def parameters(self): # -> dict[str, Any | None]:
    ...
  
  @property
  def inner_kernel(self): # -> None:
    ...
  
  @property
  def chain_axis_names(self): # -> None:
    ...
  
  @property
  def is_calibrated(self):
    ...
  
  @property
  def experimental_shard_axis_names(self):
    ...
  
  def experimental_with_shard_axes(self, shard_axis_names):
    ...
  



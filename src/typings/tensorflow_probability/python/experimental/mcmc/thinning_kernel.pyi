"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.mcmc import kernel as kernel_base

"""Kernel for Thinning."""
__all__ = ['ThinningKernel']
class ThinningKernel(kernel_base.TransitionKernel):
  """Discards samples to perform thinning.

  `ThinningKernel` is a composable `TransitionKernel` that thins samples
  returned by its `inner_kernel`. All Transition Kernels wrapping it will only
  see non-discarded samples.
  """
  def __init__(self, inner_kernel, num_steps_to_skip, name=...) -> None:
    """Instantiates this object.

    Args:
      inner_kernel: `TransitionKernel` whose `one_step` will generate
        MCMC results.
      num_steps_to_skip: Integer or scalar `Tensor` representing
        the number of chain steps skipped before collecting a result.
      name: Python `str` name prefixed to Ops created by this function.
        Default value: `None` (i.e., "thinning_kernel").
    """
    ...
  
  def one_step(self, current_state, previous_kernel_results, seed=...): # -> tuple[Any, Any]:
    """Collects one non-thinned chain state.

    Args:
      current_state: `Tensor` or Python `list` of `Tensor`s
        representing the current state(s) of the Markov chain(s),
      previous_kernel_results: `collections.namedtuple` containing `Tensor`s
        representing values from previous calls to this function (or from the
        `bootstrap_results` function).
      seed: PRNG seed; see `tfp.random.sanitize_seed` for details.

    Returns:
      new_chain_state: Newest non-discarded MCMC chain state drawn from
        the `inner_kernel`.
      kernel_results: `collections.namedtuple` of internal calculations used to
        advance the chain.
    """
    ...
  
  def bootstrap_results(self, init_state):
    """Instantiates a new kernel state with no calls.

    Args:
      init_state: `Tensor` or Python `list` of `Tensor`s representing the
        state(s) of the Markov chain(s).

    Returns:
      kernel_results: `collections.namedtuple` of `Tensor`s representing
        internal calculations made within this function.
    """
    ...
  
  @property
  def is_calibrated(self):
    ...
  
  @property
  def inner_kernel(self): # -> str:
    ...
  
  @property
  def num_steps_to_skip(self): # -> str:
    ...
  
  @property
  def name(self): # -> str:
    ...
  
  @property
  def parameters(self): # -> dict[str, Any | str]:
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.distributions import distribution as distribution_lib

"""Distributions for distributed computations."""
JAX_MODE = ...
class Sharded(distribution_lib.AutoCompositeTensorDistribution):
  """A meta-distribution meant for use in an SPMD distributed context.

  `Sharded` is a meta-distribution that enables distributions to be used in SPMD
  programs. A `Sharded` distribution represents a random variable that has
  been split across a set of devices. The number of shards is the number of
  devices in the current TensorFlow DistributionStrategy or the provided JAX
  pmap axis.

  In practice, `Sharded` modifies its input distribution in two ways.
  First, when a `Sharded` distribution is sampled, it first folds the current
  device ID into the input random seed, resulting in different samples on each
  device. Second, when computing the `log_prob` of a value, a `Sharded`
  distribution aggregates the log-prob over all devices, resulting in the same
  synchronized value.
  """
  def __init__(self, distribution, shard_axis_name=..., validate_args=..., name=...) -> None:
    """Constructs a `Sharded` distribution.

    Args:
      distribution: The base distribution instance to transform. Typically an
        instance of `Distribution`.
      shard_axis_name: `str` or a list of strings for axis name(s). An empty
        list means that no sharding is actually done. This can be `None` under
        the TensorFlow backend (meaning a sharded axis is present, but
        anonymous). Only the JAX backend supports multiple axes names.
      validate_args: Python `bool`.  Whether to validate input with asserts. If
        `validate_args` is `False`, and the inputs are invalid, correct behavior
        is not guaranteed.
      name: The name for ops managed by the distribution.
        Default value: `None` (i.e., `'Sharded' + distribution.name`).
    """
    ...
  
  @property
  def experimental_shard_axis_names(self):
    ...
  
  @property
  def distribution(self): # -> Any:
    ...
  
  _log_prob = ...
  _unnormalized_log_prob = ...



"""
This type stub file was generated by pyright.
"""

"""Annotations of special functions."""
PY2_OR_OLDER = ...
class SpecialMethods:
  """Special methods to intercept."""
  __slots__ = ...
  def __action__(self, fn, *args, **kwargs):
    ...
  
  __repr__ = ...
  __str__ = ...
  __bytes__ = ...
  __format__ = ...
  __lt__ = ...
  __le__ = ...
  __eq__ = ...
  __ne__ = ...
  __gt__ = ...
  __ge__ = ...
  __hash__ = ...
  __bool__ = ...
  __len__ = ...
  __getitem__ = ...
  __setitem__ = ...
  __delitem__ = ...
  __iter__ = ...
  __next__ = ...
  __reversed__ = ...
  __contains__ = ...
  __neg__ = ...
  __pos__ = ...
  __abs__ = ...
  __invert__ = ...
  __complex__ = ...
  __int__ = ...
  __float__ = ...
  __index__ = ...
  __round__ = ...
  __trunc__ = ...
  __floor__ = ...
  __ceil__ = ...
  __enter__ = ...
  __exit__ = ...
  __call__ = ...
  if PY2_OR_OLDER:
    def next(self, *default):
      ...
    
    __inv__ = ...
    __nonzero__ = ...
    __long__ = ...
    __hex__ = ...
    __oct__ = ...
  else:
    __length_hint__ = ...
  __add__ = ...
  __sub__ = ...
  __mul__ = ...
  __truediv__ = ...
  __floordiv__ = ...
  __mod__ = ...
  __divmod__ = ...
  __pow__ = ...
  __lshift__ = ...
  __rshift__ = ...
  __and__ = ...
  __xor__ = ...
  __or__ = ...
  __radd__ = ...
  __rsub__ = ...
  __rmul__ = ...
  __rtruediv__ = ...
  __rfloordiv__ = ...
  __rmod__ = ...
  __rdivmod__ = ...
  __rpow__ = ...
  __rlshift__ = ...
  __rrshift__ = ...
  __rand__ = ...
  __rxor__ = ...
  __ror__ = ...
  __iadd__ = ...
  __isub__ = ...
  __imul__ = ...
  __itruediv__ = ...
  __ifloordiv__ = ...
  __imod__ = ...
  __ipow__ = ...
  __ilshift__ = ...
  __irshift__ = ...
  __iand__ = ...
  __ixor__ = ...
  __ior__ = ...
  if PY2_OR_OLDER:
    __cmp__ = ...
    __rcmp__ = ...
    __div__ = ...
    __rdiv__ = ...
    __idiv__ = ...
  else:
    __matmul__ = ...
    __rmatmul__ = ...
    __imatmul__ = ...
  def __getattr__(self, attr):
    """Implements `__getattr__`."""
    ...
  


_GETATTRIBUTE_PASSTHROUGH_OVERRIDE = ...
_GETATTRIBUTE_PASSTHROUGH_OVERRIDE_CALLABLES = ...
SPECIAL_PROPERTIES = ...
IGNORED_SPECIAL_METHODS = ...
class ObjectProxy(SpecialMethods):
  """Like `wrapt.ObjectProxy` except using our way."""
  slots = ...
  def __init__(self, wrapped, unpack=...) -> None:
    ...
  
  def __action__(self, fn, *args, **kwargs):
    ...
  


def try_get_name(fn, name_fallback=...): # -> str:
  ...


"""
This type stub file was generated by pyright.
"""

"""A wrapper to XLA-compile an object's public methods."""
__all__ = ['DEFAULT_METHODS_EXCLUDED_FROM_JIT', 'JitPublicMethods']
JAX_MODE = ...
NUMPY_MODE = ...
DEFAULT_METHODS_EXCLUDED_FROM_JIT = ...
if NUMPY_MODE:
  JitPublicMethods = ...
else:
  class JitPublicMethods:
    """Wrapper to compile an object's public methods using XLA."""
    def __init__(self, object_to_wrap, trace_only=..., methods_to_exclude=...) -> None:
      """Wraps an object's public methods using `tf.function`/`jax.jit`.

      Args:
        object_to_wrap: Any Python object; for example, a
          `tfd.Distribution` instance.
        trace_only: Python `bool`; if `True`, the object's methods are
          not compiled, but only traced with `tf.function(jit_compile=False)`.
          This is only valid in the TensorFlow backend; in JAX, passing
          `trace_only=True` will raise an exception.
          Default value: `False`.
        methods_to_exclude: List of Python `str` method names not to wrap.
          For example, these may include methods that do not take or return
          Tensor values. By default, a number of `tfd.Distribution` and
          `tfb.Bijector` methods and properties are excluded (e.g.,
          `event_shape`, `batch_shape`, `dtype`, etc.).
          Default value:
            tfp.experimental.util.DEFAULT_METHODS_EXCLUDED_FROM_JIT`

      """
      ...
    
    @property
    def methods_to_exclude(self):
      ...
    
    @property
    def trace_only(self): # -> bool:
      ...
    
    @property
    def object_to_wrap(self): # -> Any:
      ...
    
    def copy(self, **kwargs): # -> Self:
      ...
    
    def __getitem__(self, slices): # -> Self:
      ...
    
    def __getattr__(self, name): # -> Callable[..., object] | Any:
      ...
    
  
  

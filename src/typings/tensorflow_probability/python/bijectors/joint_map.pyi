"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector as bijector_lib, composition

"""JointMap bijector."""
__all__ = ['JointMap']
class _JointMap(composition.Composition):
  """Bijector which applies a structure of bijectors in parallel.

  This is the "structured" counterpart to `Chain`. Whereas `Chain` applies an
  ordered sequence, JointMap applies a structure of transformations to a
  matching structure of inputs.

  Example Use:

  ```python
  exp = Exp()
  scale = Scale(2.)
  parallel = JointMap({'a': exp, 'b': scale})
  x = {'a': 1., 'b': 2.}

  parallel.forward(x)
  # = {'a': exp.forward(x['a']), 'b': scale.forward(x['b'])}
  # = {'a': tf.exp(1.), 'b': 2. * 2.}

  parallel.inverse(x)
  # = {'a': exp.inverse(x['a']), 'b': scale.inverse(x['b'])}
  # = {'a': tf.log(1.), 'b': 2. / 2.}
  ```

  Bijectors need not be a dictionary; it could be a list, tuple, list of
  dictionaries, or anything else supported by `tf.nest.map_structure`.
  """
  def __init__(self, bijectors=..., validate_args=..., parameters=..., name=...) -> None:
    """Instantiates `JointMap` bijector.

    Args:
      bijectors: Structure of bijector instances to apply in parallel.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      parameters: Locals dict captured by subclass constructor, to be used for
        copy/slice re-instantiation operators.
      name: Python `str`, name given to ops managed by this object.
        Default value: automatically constructed, e.g.,
          `jointmap_of_exp_and_softplus`.

    Raises:
      ValueError: if bijectors have different dtypes.
    """
    ...
  


class JointMap(_JointMap, bijector_lib.AutoCompositeTensorBijector):
  def __new__(cls, *args, **kwargs): # -> _JointMap:
    """Returns a `_JointMap` any of `bijectors` is not a `CompositeTensor."""
    ...
  



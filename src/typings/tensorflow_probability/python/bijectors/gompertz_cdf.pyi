"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""Gompertz CDF bijector."""
__all__ = ['GompertzCDF']
class GompertzCDF(bijector.CoordinatewiseBijectorMixin, bijector.AutoCompositeTensorBijector):
  """Compute `Y = g(X) = 1 - exp(-c * (exp(rate * X) - 1)`, the Gompertz CDF.

  This bijector maps inputs from `[-inf, inf]` to `[0, inf]`. The inverse of the
  bijector applied to a uniform random variable `X ~ U(0, 1)` gives back a
  random variable with the
  [Gompertz distribution](https://en.wikipedia.org/wiki/Gompertz_distribution):

  ```none
  Y ~ GompertzCDF(concentration, rate)
  pdf(y; c, r) = r * c * exp(r * y + c - c * exp(-c * exp(r * y)))
  ```

  Note: Because the Gompertz distribution concentrates its mass close to zero,
  for larger rates or larger concentrations, `bijector.forward` will quickly
  saturate to 1.
  """
  def __init__(self, concentration, rate, validate_args=..., name=...) -> None:
    """Instantiates the `GompertzCDF` bijector.

    Args:
      concentration: Positive Float-like `Tensor` that is the same dtype and is
        broadcastable with `concentration`.
        This is `c` in `Y = g(X) = 1 - exp(-c * (exp(rate * X) - 1)`.
      rate: Positive Float-like `Tensor` that is the same dtype and is
        broadcastable with `concentration`.
        This is `rate` in `Y = g(X) = 1 - exp(-c * (exp(rate * X) - 1)`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
    """
    ...
  
  @property
  def concentration(self):
    """The `c` in `Y = g(X) = 1 - exp(-c * (exp(rate * X) - 1)`."""
    ...
  
  @property
  def rate(self):
    """The `rate` in `Y = g(X) = 1 - exp(-c * (exp(rate * X) - 1)`."""
    ...
  



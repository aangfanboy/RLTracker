"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import scale_matvec_linear_operator

"""ScaleMatvecDiag bijector."""
__all__ = ['ScaleMatvecDiag']
class ScaleMatvecDiag(scale_matvec_linear_operator.ScaleMatvecLinearOperator):
  """Compute `Y = g(X; scale) = scale @ X`.

  In TF parlance, the `scale` term is logically equivalent to:

  ```python
  scale = tf.diag(scale_diag)
  ```

  The `scale` term is applied without materializing a full dense matrix.

  #### Examples

  ```python
  # Y = tf.diag(d1) @ X
  b = ScaleMatvecDiag(scale_diag=[-1., 2, 1])  # Implicitly 3x3.
  ```

  """
  def __init__(self, scale_diag, adjoint=..., validate_args=..., name=..., dtype=...) -> None:
    """Instantiates the `ScaleMatvecDiag` bijector.

    This `Bijector`'s forward operation is:

    ```none
    Y = g(X) = scale @ X
    ```

    where the `scale` term is logically equivalent to:

    ```python
    scale = tf.diag(scale_diag)
    ```

    Args:
      scale_diag: Floating-point `Tensor` representing the diagonal matrix.
        `scale_diag` has shape `[N1, N2, ...  k]`, which represents a k x k
        diagonal matrix.
      adjoint: Python `bool` indicating whether to use the `scale` matrix as
        specified or its adjoint.
        Default value: `False`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
      dtype: `tf.DType` to prefer when converting args to `Tensor`s. Else, we
        fall back to a common dtype inferred from the args, finally falling back
        to float32.

    Raises:
      ValueError: if `scale_diag` is not specified.
    """
    ...
  



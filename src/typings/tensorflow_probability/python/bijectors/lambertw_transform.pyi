"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector, chain

"""Implements bijectors based on heavy-tail Lambert W transformations.

The heavy-tail Lambert W transformation can be used to add heavy-tails to a
(location-scale) distribution.  It is based on the bijective transformation of
a (location-scale) input variable X to a heavy-tailed output variable Y:

  Y = (U * exp (delta/2 * U^2)) * scale + shift,

where U = (X - shift) / scale and delta >= 0 controls the degree of heavy-tails.
Clearly, if delta == 0, Y = X.

More interestingly, this transformation is bijective (for delta >= 0) and thus
can be inverted, which leads to a Gaussianization transformation of data y:

  X = loc + scale * W_delta((Y - shift) / scale),

where

  W_delta(z) = sign(z) * sqrt(W(0.5 * delta * z^2)),

and W(z) is the Lambert W function.

It is thus a generalization of the standard scaling function,
u = (x - mu) / sigma, which adds a step to also remove heavy-tails with a
bijective transformation.

Lambert W bijectors are the basis of Lambert W x F distributions, which are a
generalization of any X ~ F random variable into its heavy-tailed version
Y ~ Lambert W x F. See `LambertWDistribution` class for details.


### References:
[1]: Goerg, G.M., 2011. Lambert W random variables - a new family of generalized
skewed distributions with applications to risk estimation. The Annals of Applied
Statistics, 5(3), pp.2197-2230.
[2]: Goerg, G.M., 2015. The Lambert way to Gaussianize heavy-tailed data with
the inverse of Tukey's h transformation as a special case. The Scientific World
Journal.
"""
__all__ = ["LambertWTail"]
class _HeavyTailOnly(bijector.CoordinatewiseBijectorMixin, bijector.AutoCompositeTensorBijector):
  """Heavy tail transformation for Lambert W x F distributions.

  This bijector defines the transformation z = u * exp(0.5 * delta * u**2)
  and its inverse, where it is assumed that `u` is already an appropriately
  shifted & scaled input. It is the basis of the location-scale heavy-tail
  Lambert W x F distributions / transformations.
  The effect of this transformation is that it adds heavy tails to input.

  Attributes:
    tailweight: Tail parameter `delta` of the transformation(s).
  """
  def __init__(self, tailweight, validate_args=..., name=...) -> None:
    """Construct heavy-tail Lambert W bijector.

    Args:
      tailweight: Floating point tensor; specifies the excess tail behaviors of
        the distribution(s). Must contain only non-negative values.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      name: Python `str` name prefixed to Ops created by this class.
    """
    ...
  


class LambertWTail(bijector.CoordinatewiseBijectorMixin, chain.Chain):
  """LambertWTail transformation for heavy-tail Lambert W x F random variables.

  A random variable Y has a Lambert W x F distribution if W_tau(Y) = X has
  distribution F, where tau = (shift, scale, tail) parameterizes the inverse
  transformation.

  This bijector defines the transformation underlying Lambert W x F
  distributions that transform an input random variable to an output
  random variable with heavier tails. It is defined as

    Y = (U * exp(0.5 * tail * U^2)) * scale + shift,  tail >= 0

  where U = (X - shift) / scale is a shifted/scaled input random variable, and
  tail >= 0 is the tail parameter.

  Attributes:
    shift: shift to center (uncenter) the input data.
    scale: scale to normalize (de-normalize) the input data.
    tailweight: Tail parameter `delta` of heavy-tail transformation; must be
      >= 0.
  """
  def __init__(self, shift, scale, tailweight, validate_args=..., name=...) -> None:
    """Construct a location scale heavy-tail Lambert W bijector.

    The parameters `shift`, `scale`, and `tail` must be shaped in a way that
    supports broadcasting (e.g. `shift + scale + tail` is a valid operation).

    Args:
      shift: Floating point tensor; the shift for centering (uncentering) the
        input (output) random variable(s).
      scale: Floating point tensor; the scaling (unscaling) of the input
        (output) random variable(s). Must contain only positive values.
      tailweight: Floating point tensor; the tail behaviors of the output random
        variable(s).  Must contain only non-negative values.
      validate_args: Python `bool`, default `False`. When `True` distribution
        parameters are checked for validity despite possibly degrading runtime
        performance. When `False` invalid inputs may silently render incorrect
        outputs.
      name: Python `str` name prefixed to Ops created by this class.

    Raises:
      TypeError: if `shift` and `scale` and `tail` have different `dtype`.
    """
    ...
  



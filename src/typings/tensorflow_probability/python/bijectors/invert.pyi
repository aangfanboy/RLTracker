"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector as bijector_lib

"""Invert bijector."""
__all__ = ['Invert']
class _Invert(bijector_lib.Bijector):
  """Bijector which inverts another Bijector.

  Example Use: [ExpGammaDistribution (see Background & Context)](
  https://reference.wolfram.com/language/ref/ExpGammaDistribution.html)
  models `Y=log(X)` where `X ~ Gamma`.

  ```python
  exp_gamma_distribution = TransformedDistribution(
    distribution=Gamma(concentration=1., rate=2.),
    bijector=bijector.Invert(bijector.Exp())
  ```

  """
  def __init__(self, bijector, validate_args=..., parameters=..., name=...) -> None:
    """Creates a `Bijector` which swaps the meaning of `inverse` and `forward`.

    Note: An inverted bijector's `inverse_log_det_jacobian` is often more
    efficient if the base bijector implements `_forward_log_det_jacobian`. If
    `_forward_log_det_jacobian` is not implemented then the following code is
    used:

    ```python
    y = self.inverse(x, **kwargs)
    return -self.inverse_log_det_jacobian(y, **kwargs)
    ```

    Args:
      bijector: Bijector instance.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      parameters: Locals dict captured by subclass constructor, to be used for
        copy/slice re-instantiation operators.
      name: Python `str`, name given to ops managed by this object.
    """
    ...
  
  def forward_event_shape(self, input_shape):
    ...
  
  def forward_event_shape_tensor(self, input_shape):
    ...
  
  def inverse_event_shape(self, output_shape):
    ...
  
  def inverse_event_shape_tensor(self, output_shape):
    ...
  
  @property
  def bijector(self): # -> Any:
    ...
  
  def forward(self, x, **kwargs):
    ...
  
  def inverse(self, y, **kwargs):
    ...
  
  def inverse_log_det_jacobian(self, y, event_ndims=..., **kwargs):
    ...
  
  def forward_log_det_jacobian(self, x, event_ndims=..., **kwargs):
    ...
  
  def forward_dtype(self, dtype=..., **kwargs):
    ...
  
  def inverse_dtype(self, dtype=..., **kwargs):
    ...
  
  def inverse_event_ndims(self, event_ndims, **kwargs):
    ...
  
  def forward_event_ndims(self, event_ndims, **kwargs):
    ...
  
  def __str__(self) -> str:
    ...
  
  def __repr__(self): # -> str:
    ...
  


class Invert(_Invert, bijector_lib.AutoCompositeTensorBijector):
  def __new__(cls, *args, **kwargs): # -> _Invert:
    """Returns an `_Invert` instance if `bijector` is not a `CompositeTensor."""
    ...
  



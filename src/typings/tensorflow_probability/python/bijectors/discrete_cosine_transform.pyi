"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""Discrete Cosine Transform bijector."""
__all__ = ['DiscreteCosineTransform']
class DiscreteCosineTransform(bijector.AutoCompositeTensorBijector):
  """Compute `Y = g(X) = DCT(X)`, where DCT type is indicated by the `type` arg.

  The [discrete cosine transform](
  https://en.wikipedia.org/wiki/Discrete_cosine_transform) efficiently applies
  a unitary DCT operator. This can be useful for mixing and decorrelating across
  the innermost event dimension.

  The inverse `X = g^{-1}(Y) = IDCT(Y)`, where IDCT is DCT-III for type==2.

  This bijector can be interleaved with affine bijectors to build a cascade of
  structured efficient linear layers as in [1].

  Note that the operator applied is orthonormal (i.e. `norm='ortho'`).

  #### References

  [1]: Moczulski M, Denil M, Appleyard J, de Freitas N. ACDC: A structured
       efficient linear layer. In _International Conference on Learning
       Representations_, 2016. https://arxiv.org/abs/1511.05946
  """
  def __init__(self, dct_type=..., validate_args=..., name=...) -> None:
    """Instantiates the `DiscreteCosineTransform` bijector.

    Args:
      dct_type: Python `int`, the DCT type performed by the forward
        transformation. Currently, only 2 and 3 are supported.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
    """
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""Bijector to raise input to a given power."""
__all__ = ['Power']
class Power(bijector.CoordinatewiseBijectorMixin, bijector.AutoCompositeTensorBijector):
  """Compute `g(X) = X ** power`; where X is a non-negative real number.

  When `power` is an odd integer, this bijector has domain the whole real line,
  and otherwise is constrained to non-negative numbers.

  Note: Powers that are reciprocal of odd integers like `1. / 3` are not
  supported because of numerical precision issues that make this property
  difficult to test. In order to simulate this behavior, we recommend using
  the `Invert` bijector instead (i.e. instead of `tfb.Power(power=1./3)`
  use `tfb.Invert(tfb.Power(power=3.))`).
  """
  def __init__(self, power, validate_args=..., name=...) -> None:
    """Instantiates the `Power` bijector.

    Args:
      power: float `Tensor` power to raise the input to.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
    """
    ...
  
  @property
  def power(self):
    ...
  



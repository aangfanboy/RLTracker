"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""Shifted Gompertz CDF bijector."""
__all__ = ['ShiftedGompertzCDF']
class ShiftedGompertzCDF(bijector.CoordinatewiseBijectorMixin, bijector.AutoCompositeTensorBijector):
  """Compute `Y = g(X) = (1 - exp(-rate * X)) * exp(-c * exp(-rate * X))`.

  This bijector maps inputs from `[-inf, inf]` to `[0, inf]`. The inverse of the
  bijector applied to a uniform random variable `X ~ U(0, 1)` gives back a
  random variable with the
  [Shifted Gompertz distribution](
    https://en.wikipedia.org/wiki/Shifted_Gompertz_distribution):

  ```none
  Y ~ ShiftedGompertzCDF(concentration, rate)
  pdf(y; c, r) = r * exp(-r * y - exp(-r * y) / c) * (1 + (1 - exp(-r * y)) / c)
  ```

  Note: Even though this is called `ShiftedGompertzCDF`, when applied to the
  `Uniform` distribution, this is not the same as applying a `GompertzCDF` with
  a `Shift` bijector (i.e. the Shifted Gompertz distribution is not the same as
  a Gompertz distribution with a location parameter).

  Note: Because the Shifted Gompertz distribution concentrates its mass close
  to zero, for larger rates or larger concentrations, `bijector.forward` will
  quickly saturate to 1.
  """
  def __init__(self, concentration, rate, validate_args=..., name=...) -> None:
    """Instantiates the `ShiftedGompertzCDF` bijector.

    Args:
      concentration: Positive Float-like `Tensor` that is the same dtype and is
        broadcastable with `concentration`.
        This is `c` in
        `Y = g(X) = (1 - exp(-rate * X)) * exp(-exp(-rate * X) / c)`.
      rate: Positive Float-like `Tensor` that is the same dtype and is
        broadcastable with `concentration`.
        This is `rate` in
        `Y = g(X) = (1 - exp(-rate * X)) * exp(-exp(-rate * X) / c)`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
    """
    ...
  
  @property
  def concentration(self):
    """The `c` in `Y = g(X) = (1 - exp(-r * X)) * exp(-exp(-r * X) / c)`."""
    ...
  
  @property
  def rate(self):
    """The `r` in `Y = g(X) = (1 - exp(-r * X)) * exp(-exp(-r * X) / c)`."""
    ...
  



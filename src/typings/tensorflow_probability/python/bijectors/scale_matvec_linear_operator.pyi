"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""ScaleMatvecLinearOperator and ScaleMatvecLinearOperatorBlock bijectors."""
__all__ = ['ScaleMatvecLinearOperator', 'ScaleMatvecLinearOperatorBlock']
class _ScaleMatvecLinearOperatorBase(bijector.AutoCompositeTensorBijector):
  """Common base class for `ScaleMatvecLinearOperator{Block}`."""
  @property
  def scale(self):
    """The `scale` `LinearOperator` in `Y = scale @ X`."""
    ...
  
  @property
  def adjoint(self):
    """`bool` indicating whether this class uses `self.scale` or its adjoint."""
    ...
  


class ScaleMatvecLinearOperator(_ScaleMatvecLinearOperatorBase):
  """Compute `Y = g(X; scale) = scale @ X`.

  `scale` is a `LinearOperator` and the forward transformation is: `scale @ X`
  where `@` denotes matrix-vector multiplication.

  If `X` is a scalar (represented as a vector of length `1`) then the forward
  transformation is: `scale * X` where `*` denotes broadcasted elementwise
  product.

  Example Use:

  ```python
  x = [1., 2, 3]

  diag = [1., 2, 3]
  scale = tf.linalg.LinearOperatorDiag(diag)
  bijector = ScaleMatvecLinearOperator(scale)
  # In this case, `forward` is equivalent to:
  # y = scale @ x
  y = bijector.forward(x)  # Tensor([1., 4, 9])

  tril = [[1., 0, 0],
          [2, 1, 0],
          [3, 2, 1]]
  scale = tf.linalg.LinearOperatorLowerTriangular(tril)
  bijector = ScaleMatvecLinearOperator(scale)
  # In this case, `forward` is equivalent to:
  # np.squeeze(np.matmul(tril, np.expand_dims(x, -1)), -1)
  y = bijector.forward(x)  # Tensor([1., 4, 10])
  ```

  """
  def __init__(self, scale, adjoint=..., validate_args=..., parameters=..., name=...) -> None:
    """Instantiates the `ScaleMatvecLinearOperator` bijector.

    Args:
      scale:  Subclass of `LinearOperator`. Represents the (batch, non-singular)
        linear transformation by which the `Bijector` transforms inputs.
      adjoint: Python `bool` indicating whether to use the `scale` matrix as
        specified or its adjoint.
        Default value: `False`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      parameters: Locals dict captured by subclass constructor, to be used for
        copy/slice re-instantiation operators.
      name: Python `str` name given to ops managed by this object.

    Raises:
      TypeError: if `scale` is not a `LinearOperator`.
      ValueError: if not `scale.is_non_singular`.
    """
    ...
  


class ScaleMatvecLinearOperatorBlock(_ScaleMatvecLinearOperatorBase):
  """Compute `Y = g(X; scale) = scale @ X` for blockwise `X` and `scale`.

  `scale` is a `LinearOperator` that supports blockwise semantics, e.g.
  `LinearOperatorBlockDiag` or `LinearOperatorBlockLowerTriangular`. The forward
  transformation is: `scale @ X` where `X` is a list or tuple of `Tensor`s, the
  rightmost dimensions of which match the `domain_dimension`s of the
  corresponding operators in `scale`'s block structure.

  Example use:

  ```python
  op_1 = tf.linalg.LinearOperatorDiag(diag=[1., -1., 3.])
  op_2 = tf.linalg.LinearOperatorFullMatrix([[12., 5.], [-1., 3.]])
  scale = tf.linalg.LinearOperatorBlockDiag([op_1, op_2], is_non_singular=True)
  bijector = ScaleMatvecLinearOperatorBlock(scale)

  x = [[2., 0., 1.], [3., 1.]]  # Input consisting of two blocks
  y = bijector.forward(x)  # [Tensor([2., 0., 3.]), Tensor([41., 0.])]
  ```

  """
  def __init__(self, scale, adjoint=..., validate_args=..., parameters=..., name=...) -> None:
    """Instantiates the `ScaleMatvecLinearOperatorBlock` bijector.

    Args:
      scale:  Subclass of `LinearOperator` that supports blockwise semantics
        (e.g. `LinearOperatorBlockDiag` or
        `LinearOperatorBlockLowerTriangular`). Represents the (blockwise, batch,
        non-singular) linear transformation by which the `Bijector` transforms
        inputs.
      adjoint: Python `bool` indicating whether to use the `scale` matrix as
        specified or its adjoint.
        Default value: `False`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      parameters: Locals dict captured by subclass constructor, to be used for
        copy/slice re-instantiation operators.
      name: Python `str` name given to ops managed by this object.

    Raises:
      TypeError: if `scale` is not a `LinearOperator`.
      ValueError: if not `scale.is_non_singular`.
    """
    ...
  



"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.bijectors import bijector

"""WeibullCDF bijector."""
__all__ = ['WeibullCDF']
class WeibullCDF(bijector.CoordinatewiseBijectorMixin, bijector.AutoCompositeTensorBijector):
  """Compute `Y = g(X) = 1 - exp( -( X / scale) ** concentration), X >= 0`.

  This bijector maps inputs from `[0, inf]` to `[0, 1]`. The inverse of the
  bijector applied to a uniform random variable `X ~ U(0, 1)` gives back a
  random variable with the
  [Weibull distribution](https://en.wikipedia.org/wiki/Weibull_distribution):

  ```none
  Y ~ Weibull(scale, concentration)
  pdf(y; scale, concentration, y >= 0) =
      (concentration / scale) * (y / scale)**(concentration - 1) *
      exp(-(y / scale)**concentration)
  ```

  Likwewise, the forward of this bijector is the Weibull distribution CDF.
  """
  def __init__(self, scale=..., concentration=..., validate_args=..., name=...) -> None:
    """Instantiates the `WeibullCDF` bijector.

    Args:
      scale: Positive Float-type `Tensor` that is the same dtype and is
        broadcastable with `concentration`.
        This is `l` in `Y = g(X) = 1 - exp( -( x / l) ** k)`.
      concentration: Positive Float-type `Tensor` that is the same dtype and is
        broadcastable with `scale`.
        This is `k` in `Y = g(X) = 1 - exp( -( x / l) ** k)`.
      validate_args: Python `bool` indicating whether arguments should be
        checked for correctness.
      name: Python `str` name given to ops managed by this object.
    """
    ...
  
  @property
  def scale(self):
    """The `l` in `Y = g(X) = 1 - exp( -( x / l) ** k)`."""
    ...
  
  @property
  def concentration(self):
    """The `k` in `Y = g(X) = 1 - exp( -( x / l) ** k)`."""
    ...
  



"""
This type stub file was generated by pyright.
"""

import tensorflow.compat.v2 as tf

"""Tools for processing Tensors."""
__all__ = ['convert_nonref_to_tensor', 'discover_trainable_variables', 'discover_variables', 'identity_as_tensor', 'is_module', 'is_ref', 'is_trainable_variable', 'is_variable']
def convert_nonref_to_tensor(value, dtype=..., dtype_hint=..., as_shape_tensor=..., name=...): # -> None:
  """Converts the given `value` to a `Tensor` if input is nonreference type.

  This function converts Python objects of various types to `Tensor` objects
  only if the input has nonreference semantics. Reference semantics are
  characterized by `tensor_util.is_ref` and is any object which is a
  `tf.Variable` or instance of `tf.Module`. This function accepts any input
  which `tf.convert_to_tensor` would also.

  Note: This function diverges from default Numpy behavior for `float` and
    `string` types when `None` is present in a Python list or scalar. Rather
    than silently converting `None` values, an error will be thrown.

  Args:
    value: An object whose type has a registered `Tensor` conversion function.
    dtype: Optional element type for the returned tensor. If missing, the
      type is inferred from the type of `value`.
    dtype_hint: Optional element type for the returned tensor,
      used when dtype is None. In some cases, a caller may not have a
      dtype in mind when converting to a tensor, so dtype_hint
      can be used as a soft preference.  If the conversion to
      `dtype_hint` is not possible, this argument has no effect.
    as_shape_tensor: Optional boolean when if `True` uses
      `prefer_static.convert_to_shape_tensor` instead of `tf.convert_to_tensor`
      for JAX compatibility.
    name: Optional name to use if a new `Tensor` is created.

  Returns:
    tensor: A `Tensor` based on `value`.

  Raises:
    TypeError: If no conversion function is registered for `value` to `dtype`.
    RuntimeError: If a registered conversion function returns an invalid value.
    ValueError: If the `value` is a tensor not of given `dtype` in graph mode.


  #### Examples:

  ```python
  from tensorflow_probability.python.internal import tensor_util

  x = tf.Variable(0.)
  y = tensor_util.convert_nonref_to_tensor(x)
  x is y
  # ==> True

  x = tf.constant(0.)
  y = tensor_util.convert_nonref_to_tensor(x)
  x is y
  # ==> True

  x = np.array(0.)
  y = tensor_util.convert_nonref_to_tensor(x)
  x is y
  # ==> False
  tf.is_tensor(y)
  # ==> True

  x = tfp.util.DeferredTensor(13.37, lambda x: x)
  y = tensor_util.convert_nonref_to_tensor(x)
  x is y
  # ==> True
  tf.is_tensor(y)
  # ==> True
  tf.equal(y, 13.37)
  # ==> True
  ```

  """
  ...

def identity_as_tensor(value):
  """Converts `value` to `Tensor` while ensuring an op is added to the graph."""
  ...

def is_ref(x): # -> bool:
  """Evaluates if the object has reference semantics.

  An object is deemed "reference" if it is a `tf.Variable` instance or is
  derived from a `tf.Module` with `dtype` and `shape` properties.

  Args:
    x: Any object.

  Returns:
    is_ref: Python `bool` indicating input is has nonreference semantics, i.e.,
      is a `tf.Variable` or a `tf.Module` with `dtype` and `shape` properties.
  """
  ...

def is_variable(x): # -> bool:
  """Returns `True` when input is a `tf.Variable`, otherwise `False`."""
  ...

def is_trainable_variable(x): # -> Any | bool:
  """Returns `True` when input is trainable `tf.Variable`, otherwise `False`."""
  ...

def is_module(x): # -> bool:
  """Returns `True` when input is a `tf.Module`, otherwise `False`."""
  ...

class _Track(tf.Module):
  """Bridge to create functional interface for variable tracking."""
  def __init__(self, *args, **kwargs) -> None:
    ...
  


def discover_trainable_variables(x):
  """Returns `tuple` of all trainable `tf.Variables` discoverable in input.

  Warning: unlike possibly `tf.Module`, use of this function only does a static,
  "one-time" discovery. (This is self-evidently true from its functional
  nature.)

  Args:
    x: An object to inspected for `tf.Variable` dependencies.

  Returns:
    trainable_vars: A Python `tuple` of `tf.Variable`s with `trainable=True`.
  """
  ...

def discover_variables(x):
  """Returns `tuple` of all `tf.Variables` discoverable in input.

  Warning: unlike possibly `tf.Module`, use of this function only does a static,
  "one-time" discovery. (This is self-evidently true from its functional
  nature.)

  Args:
    x: An object to inspected for `tf.Variable` dependencies.

  Returns:
    vars: A Python `tuple` of `tf.Variable`s, regardless of their value of
      `trainable`.
  """
  ...


"""
This type stub file was generated by pyright.
"""

"""Random samplers."""
__all__ = ['categorical', 'clone_seed', 'fold_in', 'gamma', 'is_stateful_seed', 'normal', 'poisson', 'sanitize_seed', 'split_seed', 'shuffle', 'uniform', 'zeros_seed']
JAX_MODE = ...
SEED_DTYPE = ...
_OldSaltSeed = ...
def enable_old_salt_for_seed(seed, enable): # -> _OldSaltSeed:
  ...

def zeros_seed():
  ...

def is_stateful_seed(seed): # -> bool:
  ...

def sanitize_seed(seed, salt=..., name=...): # -> _OldSaltSeed | object:
  """Map various PRNG seed flavors to a seed `Tensor`.

  This function implements TFP's standard PRNG seeding semantics.
  See https://github.com/tensorflow/probability/blob/main/PRNGS.md
  for details.

  Operationally, `sanitize_seed` maps any seed flavor to a
  "stateless-compatible" seed.  Under TensorFlow and NumPy this means:
  - If the `seed` argument is an `int` or `None`, we use `tf.random.uniform`
    to _statefully_ draw a pair of unbounded `int32`s and wrap them into a
    Tensor.
  - If the `seed` argument is a stateless-compatible seed already, we
    just cast it to an `int32[2]` Tensor.

  Under JAX, this function only accepts outputs from `jax.random.PRNGKey`, being
  a no-op except for the salting behavior described below.

  This, any function that accepts a `seed` argument can be written in
  stateless-seed style internally, and acquires TFP's
  seed-type-directed stateless/stateful switching behavior by just
  running the input seed through `sanitize_seed` on entry.

  The `sanitize_seed` function also allows salting the seed: if a user
  accidentally passes the same stateful seed to two different calls to
  `sanitize_seed` with different salts, they will get independent
  randomness.  We may micro-optimize by removing salting from
  `sanitize_seed` of already-stateless seeds in the future, as using a
  stateless seed already requires seed uniqueness discipline.

  Args:
    seed: An `int32[2]` Tensor or a Python list or tuple of 2 `ints`,
      which will be treated as stateless seeds; or a Python `int` or
      `None`, which will be treated as stateful seeds.
    salt: An optional Python string.
    name: An optional Python string, name to add to TF ops created by
      this function.

  Returns:
    seed: An `int32[2]` Tensor suitable for use as a stateless PRNG
      seed.

  """
  ...

def get_integer_seed(seed): # -> int:
  """Returns an integer seed in [0, 2**31).

  Args:
    seed: A seed suitable to be passed to `sanitize_seed`.

  Returns:
    integer_seed: A Python integer (if seed was a Python integer or we're in
    JAX) or an integer Tensor.
  """
  ...

def fold_in(seed, salt): # -> _OldSaltSeed:
  """Folds salt into seed to form a new seed."""
  ...

def split_seed(seed, n=..., salt=..., name=...): # -> list[_OldSaltSeed | Any] | _OldSaltSeed:
  """Splits a seed into `n` derived seeds.

  See https://github.com/tensorflow/probability/blob/main/PRNGS.md
  for details.
  Args:
    seed: The seed to split; may be an `int`, an `(int, int) tuple`, or a
      `Tensor`. `int` seeds are converted to `Tensor` seeds using
      `tf.random.uniform` stateful sampling. Tuples are converted to `Tensor`.
    n: The number of splits to return. In TensorFlow, if `n` is an integer, this
      function returns a list of seeds and otherwise returns a `Tensor` of
      seeds.  In JAX, this function always returns an array of seeds.
    salt: Optional `str` salt to mix with the seed.
    name: Optional name to scope related ops.

  Returns:
    seeds: If `n` is a Python `int`, a `tuple` of seed values is returned. If
      `n` is an int `Tensor`, a single `Tensor` of shape `[n, 2]` is returned. A
      single such seed is suitable to pass as the `seed` argument of the
      `tf.random.stateless_*` ops.
  """
  ...

def clone_seed(seed): # -> _OldSaltSeed:
  """Clones a seed so it can be reused without causing a JAX KeyReuseError."""
  ...

def categorical(logits, num_samples, dtype=..., seed=..., name=...):
  """As `tf.random.categorical`, but handling stateful/stateless `seed`s."""
  ...

def gamma(shape, alpha, beta=..., dtype=..., seed=..., name=...):
  """As `tf.random.gamma`, but handling stateful/stateless `seed`s."""
  ...

def normal(shape, mean=..., stddev=..., dtype=..., seed=..., name=...):
  """As `tf.random.normal`, but handling stateful/stateless `seed`s."""
  ...

def poisson(shape, lam, dtype=..., seed=..., name=...):
  """As `tf.random.poisson`, but handling stateful/stateless `seed`s."""
  ...

def shuffle(value, seed=..., name=...):
  """As `tf.random.shuffle`, but handling stateful/stateless `seed`s."""
  ...

def uniform(shape, minval=..., maxval=..., dtype=..., seed=..., name=...):
  """As `tf.random.uniform`, but handling stateful/stateless `seed`s."""
  ...


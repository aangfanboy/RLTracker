"""
This type stub file was generated by pyright.
"""

"""Inference of distribution and bijector batch shapes from their parameters."""
__all__ = ['inferred_batch_shape', 'inferred_batch_shape_tensor', 'get_batch_shape_tensor_part', 'get_batch_shape_part', 'broadcast_parameter_with_batch_shape', 'broadcast_parameters_with_batch_shape', 'map_fn_over_parameters_with_event_ndims']
def inferred_batch_shape(batch_object, bijector_x_event_ndims=...):
  """Infers an object's batch shape from its  parameters.

  Each parameter contributes a batch shape of
  `base_shape(parameter)[:-event_ndims(parameter)]`, where a parameter's
  `base_shape` is its batch shape if it defines one (e.g., if it is a
  Distribution, LinearOperator, etc.), and its Tensor shape otherwise,
  and `event_ndims` is as annotated by
  `batch_object.parameter_properties()[parameter_name].event_ndims`.
  Parameters with structured batch shape
  (in particular, non-autobatched JointDistributions) are not currently
  supported.

  Args:
    batch_object: Python object, typically a `tfd.Distribution` or
      `tfb.Bijector`. This must implement the method
      `batched_object.parameter_properties()` and expose a dict
      `batched_object.parameters` of the parameters passed to its constructor.
    bijector_x_event_ndims: If `batch_object` is a bijector, this is the
      (structure of) integer(s) value of `x_event_ndims` in the current context
      (for example, as passed to `experimental_batch_shape`). Otherwise, this
      argument should be `None`.
      Default value: `None`.

  Returns:
    batch_shape: `tf.TensorShape` broadcast batch shape of all parameters; may
        be partially defined or unknown.
  """
  ...

def inferred_batch_shape_tensor(batch_object, bijector_x_event_ndims=..., **parameter_kwargs): # -> list[Any]:
  """Infers an object's batch shape from its  parameters.

  Each parameter contributes a batch shape of
  `base_shape(parameter)[:-event_ndims(parameter)]`, where a parameter's
  `base_shape` is its batch shape if it defines one (e.g., if it is a
  Distribution, LinearOperator, etc.), and its Tensor shape otherwise,
  and `event_ndims` is as annotated by
  `batch_object.parameter_properties()[parameter_name].event_ndims`.
  Parameters with structured batch shape
  (in particular, non-autobatched JointDistributions) are not currently
  supported.

  Args:
    batch_object: Python object, typically a `tfd.Distribution` or
      `tfb.Bijector`. This must implement the method
      `batched_object.parameter_properties()` and expose a dict
      `batched_object.parameters` of the parameters passed to its constructor.
    bijector_x_event_ndims: If `batch_object` is a bijector, this is the
      (structure of) integer(s) value of `x_event_ndims` in the current context
      (for example, as passed to `experimental_batch_shape`). Otherwise, this
      argument should be `None`.
      Default value: `None`.
    **parameter_kwargs: Optional keyword arguments overriding parameter values
      in `batch_object.parameters`. Typically this is used to avoid multiple
      Tensor conversions of the same value.

  Returns:
    batch_shape_tensor: `Tensor` broadcast batch shape of all parameters.
  """
  ...

def get_batch_shape_tensor_part(x, event_ndims): # -> list[Any]:
  """Extracts an object's runtime (Tensor) shape for batch shape inference."""
  ...

def get_batch_shape_part(x, event_ndims):
  """Extracts an object's shape for batch shape inference."""
  ...

def batch_shape_parts(batch_object, bijector_x_event_ndims=..., **parameter_kwargs): # -> dict[Any, Any]:
  """Returns a dict mapping parameter names to their inferred batch shapes."""
  ...

def broadcast_parameters_with_batch_shape(batch_object, batch_shape, bijector_x_event_ndims=...): # -> dict[Any, Any]:
  """Broadcasts each parameter's batch shape with the given `batch_shape`.

  This returns a dict of parameters to `batch_object` broadcast with the given
  batch shape. It can be understood as a pseudo-inverse operation to batch
  slicing:

  ```python
  dist = tfd.Normal(0., 1.)
  # ==> `dist.batch_shape == []`
  broadcast_dist = dist._broadcast_parameters_with_batch_shape([3])
  # ==> `broadcast_dist.batch_shape == [3]`
  #     `broadcast_dist.loc.shape == [3]`
  #     `broadcast_dist.scale.shape == [3]`
  sliced_dist = broadcast_dist[0]
  # ==> `sliced_dist.batch_shape == []`.
  ```

  Args:
    batch_object: Python object, typically a `tfd.Distribution` or
      `tfb.Bijector`. This must implement the method
      `batched_object.parameter_properties()` and expose a dict
      `batched_object.parameters` of the parameters passed to its constructor.
    batch_shape: Integer `Tensor` batch shape.
    bijector_x_event_ndims: If `batch_object` is a bijector, this is the
      (structure of) integer(s) value of `x_event_ndims` in the current context
      (for example, as passed to `experimental_batch_shape`). Otherwise, this
      argument should be `None`.
      Default value: `None`.

  Returns:
    updated_parameters: Python `dict` mapping names of parameters from
      `batch_object.parameter_properties()` to broadcast values.
  """
  ...

def broadcast_parameter_with_batch_shape(param, param_event_ndims, batch_shape):
  """Broadcasts `param` with the given batch shape, recursively."""
  ...

def map_fn_over_parameters_with_event_ndims(batch_object, fn, bijector_x_event_ndims=..., require_static=..., **parameter_kwargs): # -> dict[Any, Any]:
  """Maps `fn` over an object's parameters and corresponding param event_ndims.

  Args:
    batch_object: Python object, typically a `tfd.Distribution` or
      `tfb.Bijector`. This must implement the method
      `batched_object.parameter_properties()` and expose a dict
      `batched_object.parameters` of the parameters passed to its constructor.
    fn: Python `callable` with signature `result = fn(param, param_event_ndims)`
      to be applied to the parameters of `batch_object`.
    bijector_x_event_ndims: If `batch_object` is a bijector, this is the
      (structure of) integer(s) value of `x_event_ndims` in the current context
      (for example, as passed to `experimental_batch_shape`). Otherwise, this
      argument should be `None`.
      Default value: `None`.
    require_static: Python `bool`, whether to use only statically available
      `event_ndims` information. If `True`, this function will perform
      no Tensor operations (other than any performed by `fn` itself), but may
      invoke `fn` with `param_event_ndims=None`.
      Default value: `False`.
    **parameter_kwargs: Optional keyword arguments overriding the parameter
      values in `batch_object.parameters`. Typically this is used to avoid
      multiple Tensor conversions of the same value.

  Returns:
    results: Dictionary with parameter names (Python `str` values) as
      keys, containing results returned by `fn`. Parameters whose value is
      `None` or that have undefined `event_ndims` will be omitted.
  """
  ...


"""
This type stub file was generated by pyright.
"""

"""Numpy implementations of `tf.TensorArray`."""
__all__ = ['TensorArray']
JAX_MODE = ...
class TensorArray:
  """Stand-in for tf.TensorArray."""
  def __init__(self, dtype, size=..., dynamic_size=..., clear_after_read=..., tensor_array_name=..., handle=..., flow=..., infer_shape=..., element_shape=..., colocate_with_first_write_call=..., data=..., name=...) -> None:
    ...
  
  @property
  def dtype(self): # -> None:
    ...
  
  @property
  def dynamic_size(self): # -> None:
    ...
  
  @property
  def element_shape(self): # -> None:
    ...
  
  def size(self, name=...): # -> int:
    ...
  
  def gather(self, indices, name=...): # -> Any:
    ...
  
  def stack(self, name=...): # -> NDArray[Any]:
    ...
  
  def unstack(self, value, name=...): # -> TensorArray:
    ...
  
  def read(self, index, name=...): # -> ndarray[_Shape, dtype[float64]] | None:
    ...
  
  def write(self, index, value, name=...): # -> TensorArray:
    """Writes `value` at position `index`."""
    ...
  
  def close(self, name=...): # -> Self:
    ...
  
  def identity(self): # -> Self:
    ...
  
  @property
  def flow(self):
    ...
  
  @property
  def handle(self):
    ...
  
  def concat(self, name=...):
    ...
  
  def grad(self, source, flow=..., name=...):
    ...
  
  def scatter(self, indices, value, name=...):
    ...
  
  def split(self, value, lengths, name=...):
    ...
  
  def __repr__(self): # -> str:
    ...
  


if JAX_MODE:
  def flatten(val): # -> tuple[tuple[Any], dict[str, Any]]:
    ...
  
  def unflatten(aux, vals): # -> TensorArray:
    ...
  

"""
This type stub file was generated by pyright.
"""

from tensorflow_probability.python.internal.backend.numpy.numpy_array import *

"""Experimental Numpy backend."""
__all__ = ['Dimension', 'Module', 'Session', 'SparseTensorValue', 'TensorArray', 'colocate_with', 'control_flow_v2_enabled', 'get_variable', 'get_variable_scope', 'global_variables_initializer', 'initializers', 'logging', 'matrix_determinant', 'matrix_solve', 'name_scope', 'placeholder_with_default', 'reset_default_graph', 'set_random_seed', 'variable_scope']
JAX_MODE = ...
matrix_determinant = ...
matrix_solve = ...
colocate_with = ...
control_flow_v2_enabled = ...
enable_control_flow_v2 = ...
get_variable = ...
get_variable_scope = ...
placeholder_with_default = ...
global_variables_initializer = ...
reset_default_graph = ...
set_random_seed = ...
where = ...
class Session:
  def __enter__(self, *_, **__): # -> Self:
    ...
  
  def __exit__(self, *_, **__): # -> None:
    ...
  
  def run(self, *args, **_): # -> tuple[Any, ...]:
    ...
  


class variable_scope:
  """A context manager for defining ops that creates variables (layers)."""
  def __init__(self, name_or_scope, default_name=..., values=..., initializer=..., regularizer=..., caching_device=..., partitioner=..., custom_getter=..., reuse=..., dtype=..., use_resource=..., constraint=..., auxiliary_name_scope=...) -> None:
    ...
  
  @property
  def caching_device(self): # -> None:
    ...
  
  @caching_device.setter
  def caching_device(self, val): # -> None:
    ...
  
  def __enter__(self, *_, **__): # -> Self:
    ...
  
  def __exit__(self, *_, **__): # -> None:
    ...
  


SparseTensorValue = ...

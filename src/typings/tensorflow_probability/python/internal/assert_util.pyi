"""
This type stub file was generated by pyright.
"""

"""TF assertions."""
assert_equal = ...
assert_greater = ...
assert_less = ...
assert_rank = ...
assert_greater_equal = ...
assert_integer = ...
assert_less_equal = ...
assert_near = ...
assert_negative = ...
assert_non_negative = ...
assert_non_positive = ...
assert_none_equal = ...
assert_positive = ...
assert_rank_at_least = ...
assert_rank_in = ...
def assert_finite(x, summarize=..., message=..., name=...):
  """Assert all elements of `x` are finite.

  Args:
    x:  Numeric `Tensor`.
    summarize: Print this many entries of each tensor.
    message: A string to prefix to the default message.
    name: A name for this operation (optional).
      Defaults to "assert_finite".

  Returns:
    Op raising `InvalidArgumentError` unless `x` has specified rank or lower.
    If static checks determine `x` has correct rank, a `no_op` is returned.

  Raises:
    ValueError: If static checks determine `x` is not finite.
  """
  ...

def assert_not_nan(x, summarize=..., message=..., name=...):
  """Assert all elements of `x` are not NaN.

  Args:
    x:  Numeric `Tensor`.
    summarize: Print this many entries of each tensor.
    message: A string to prefix to the default message.
    name: A name for this operation (optional).
      Defaults to "assert_finite".

  Returns:
    Op raising `InvalidArgumentError` unless `x` has specified rank or lower.
    If static checks determine `x` has correct rank, a `no_op` is returned.

  Raises:
    ValueError: If static checks determine `x` is not finite.
  """
  ...

def assert_rank_at_most(x, rank, summarize=..., message=..., name=...):
  """Assert `x` has rank equal to `rank` or smaller.

  Example of adding a dependency to an operation:

  ```python
  with tf.control_dependencies([tf.assert_rank_at_most(x, 2)]):
    output = tf.reduce_sum(x)
  ```

  Args:
    x:  Numeric `Tensor`.
    rank:  Scalar `Tensor`.
    summarize: Print this many entries of each tensor.
    message: A string to prefix to the default message.
    name: A name for this operation (optional).
      Defaults to "assert_rank_at_most".

  Returns:
    Op raising `InvalidArgumentError` unless `x` has specified rank or lower.
    If static checks determine `x` has correct rank, a `no_op` is returned.

  Raises:
    ValueError:  If static checks determine `x` has wrong rank.
  """
  ...

